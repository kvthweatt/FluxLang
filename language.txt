Flux is a mix of C++, Zig, and Python, and has a slightly more strict syntax than C++ or Zig.

The Flux code brace style is Allman style. There is no syntactic sugar.

Flux goes the route of **object-oriented programming** by literally having an `object` keyword.

**What's the difference between `object` and `class` types?**

**Objects:**
Prototype / forward declaration: `object myObj;`
Definition: `object myObj {};`
Instance: `myObj{} newObj;`
Member access: `newObj.x`

Example usage:
```
object myObj
{
	def __init(x, y) -> void
	{
		this.a = x;
		this.b = y;
		return;
	};
};

myObj(data1, data2){} testObject;
```

Inheritance:
```
object anotherObj<myObj>
{
	def __init() -> void
	{
		super(myObj).__init();
		return;
	};
};
```

Objects cannot be defined inside of a function, they must be within a namespace, class, or global scope.

**Classes:**
Prototype / forward declartion: `class myClass;`
Definition: `class myClass {};`
Instance: myClass{} newClass;
Member access: `newClass.newObj.x`

Example usage:
```
class myClass
{
	object myObj
	{
		def __init(w,k) -> void
		{
			return;
		};
	};
};
```

Classes cannot be defined inside of a function or object, they must be within a namespace or global scope.
Classes can only inherit from classes, and objects can only inherit from objects.
Classes cannot contain functions.

**Namespaces:**
Prototype: Cannot be prototyped.
Definition: `namespace myNamespace {};`
Member access: `myNamespace::myClass`

Namespace example:
```
namespace standard_library
{
	class myClass
	{
		def __init() -> void
		{
			return;
		};
	};
};

standard_library as std;

namespace std
{
	class newClass<myClass>
	{
		def __init() -> void
		{
			return;
		};
	};
};
```

Namespaces **MUST** be in global scope.
Duplicate namespace definitions do not redefine the namespace, the members
of both combine as if they were one namespace. This is so the standard
library or any library can have a core namespace across multiple files.
Namespaces are the only container that have this functionality.
Namespaces can only directly contain classes at their root scope.

The reason classes and objects cannot be defined inside of functions
is to make functions cleanly written. You can define them globally,
or organize them into a namespace, but not in functions.

Structs can contain instances of objects because they are qualified types, like so:
```
object myObj
{
	def __init() -> void
	{
		return;
	};
};

myObj{} newObj1, newObj2;

struct myStruct
{
	newObj1;
	newObj2;
};
```

A Flux program must have a main() function defined somewhere.
Anywhere is fine, but main will always be called first, and must be defined.

**Function definition:**
```
def name (parameters) -> return_type
{
	return return_value;
};
```

If a function's return type is void nothing will be returned, regardless of if a return value is given.

Example of a Flux program with main() defined inside a namespace:
```
namespace Program
{
	class AnotherApp
	{
		bool myFlag = false;

		def __init() -> void
		{
			this.myFlag = True;
			return;
		};
	};
};

namespace Program
{
	class App<AnotherApp>
	{
		object Engine
		{
			def __init() -> void
			{
				if (super(AnotherApp).myFlag == false)
				{
					print("Not instanced.");
					return;
				};
			};

			def state() -> bool
			{
				return super(AnotherApp).myFlag;
			};
		};
	};
};

Program::App.Engine{} myEngine;
print(myEngine.state()); // 1
```


Class and object inheritance:
```
class First
{
	object obj1()
	{
		int x = 5;
	};
};

class Second
{
	object obj2(y)
	{
		int x = y;
	};
};

class Third<First,Second>
{
	object Program
	{
		def __init() -> void
		{
			this.main();
			return;
		};

		def main() -> !void
		{
			obj1{} myObj;
			print(myObj.x);
			return 0;
		};
	};
};
```

This is inheritance exclusion:
```
class First
{
	object firstObj
	{
		int x = 5;
		def foo(x) -> int
		{
			return x;
		};
	};

	object secondObj
	{
		int z = 2;
		def foo(z) -> int
		{
			return z;
		};
	};

	object thirdObj
	{
		int y = 3;
	};
};

class Second<First{!firstObj}>
{
	object Program
	{
		def main() -> !void
		{
			print(foo()); // 2
			return 0;
		};
	};
};
```

Flux allows defining custom operators with `operator`.
You cannot redefine Flux built-in operators (+,-,*,/,&,==,+=,++,-=,-- etc)
You define operators in the following manner:
```
operator(int x, int y)[e+] -> float  // Or any return type
{
    // Implementation for e+ (x * 10 ^ +y) notation with int types
};

operator(int x, int y)[e-] -> float
{
    // Implementation for e- (x * 10 ^ -y) notation with int types
};

// To use an operator in code, you write:
def main() -> !void
{
	print(op<1e+20>-1); // Result of 1 * 10^20 - 1
	return 0;
};
```

You can also use assembly directly:

```
asm {
// Inline ASM here
};
```

Python uses f-strings, C++ uses a complicated format.
Flux uses injectable strings.
The syntax in Flux would be: `i"{}{}{}":{x;y;z;};`
The brackets are replaced with the results of the statements in order respective
to the statement position in the statement list.

**i-string Example:**
```
def bar() -> !void { return "World"; };
print(i"Hello {} {}":
              {bar() + "!";
               "test";}; 		// Whitespace is ignored, this is just for positioning
     );
```

This allows you to write clean injectable strings without strange formatting.
Every code block must be ended with a semicolon. The only exception is within the i-string "quoted {} injected {} text"


Example 2:
```
def concat(char a, char b) -> !void
{
    return a+b;  // Character array addition is native so we really don't need this function
};

def main() -> !void
{
    char h = "Hello ";  // char is the Python equivalent to string
    char w = "World";  // so  `w[3] == 'l'`
    char x = "of ";
    char y = "Coding";
    print(i"{} {}":{concat(h,w);concat(x,y);});
    return 0;
};
```
Result: Hello World of Coding

Pointers:
```
char a = "Test";
char *a = &a;
*a += "ing!";
print(a);
```
Result: "Testing!"

**Pointers to variables:**
```
int data = 0;
int *p_data = &data;

p_data += 3;
print(data);  // 3
```

**Pointers to functions:**
```
def add(int x, int y) -> int
{
	return x + y;
};

def sub(int x, int y) -> int
{
	return x - y;
};

int *p_add(int,int) = add;  // Similar to C++ syntax but no syntactic sugar
int *p_sub(int,int) = sub;

print(p_add(0,3)); // 3
print(p_sub(5,2)); // -3

list func_list = [p_add,p_sub];
```


**Pointers to objects, classes, and structs:**
```
class myClass {};               // Definition
class* p_myClass = &myClass;    // Pointer

object myObj {};                // Definition
object* p_myObj = &myObj;       // Pointer

struct myStruct {};             // Definition
struct* p_myStruct = &myStruct; // Pointer
```


**Recursive function:**
```
def rsub(int x, int y) -> int
{
	if (x == 0 || y == 0) { return 0; };

	rsub(--x,--y);
	return 0;
};
```


Import
```
import "std.fx" as std;
using std.io;				  // Only use `io` from std.fx (std.fx imports `input.fx` and `output.fx`, both use the `io` class)
//import "math.fx";           // Direct import of all the contents of math.fx
```


!void is merely a way of telling the compiler you don't know what type you'll return. You may have a function that is complex and returns various types. Flux does not support the Python-like syntax of specifying multiple return types, so we use !void instead. However, specifying the type does improve byte-code generation during compilation.

Example of the `data` type and casting:
```
import "std.fx" std;
using std.types;      // Standard types like int, uint, float, ufloat, byte, char, string, and so on.

byte someByte = {0, 1, 0, 0, 0, 0, 0, 1}; // "A" but in binary
// Example of casting to char:
char someChar = "{s}":{someByte};         // "A" - This is the standard way to cast to string in Flux
// Back to data
someChar = data:someChar;                 // {0, 1, 0, 0, 0, 0, 0, 1}
char anotherChar = "B";                   // {0, 1, 0, 0, 0, 0, 1, 0}

someChar<<;                               // {1, 0, 0, 0, 0, 0, 1, 0}  // Bit-shift left (binary doubling)
someChar>>;                               // {0, 1, 0, 0, 0, 0, 0, 1}  // Bit-shift right (binary halving)

char newChar = xor(someChar);             // {1, 0, 1, 1, 1, 1, 1, 0}  // Bit-flip (binary XOR)
newChar = xor(someChar,anotherChar);      // {0, 0, 0, 0, 0, 0, 1, 1}  // XOR two or more values ('A' XOR 'B' = 3)

// This 0's out all the data and re-casts back to data from void.
// The temporary void casted type is the same width as the original type.
data v = void:someCharacter;              // {0, 0, 0, 0, 0, 0, 0, 0}

class someClass
{
	string x = "Hello World!";                 // 12 bytes long (96 bits)
	data {3} some3bitDatatype;
};

data d_someClass = data:someClass              // 99 bits long with no alignment, aligns to class members if cast
someClass{} c_newInst = someClass:d_someClass; // Cast back to someClass (only works if class definition has members to fill)

someClass{} nulled = void:c_newInst;           // You can only void instances of classes, and objects, not the class or object itself.

// The same casting behavior applies to objects and structs
```

Casting anything to `void` is the functional equivalent of nulling the memory occupied by that thing.
It is also freed from memory and cannot be accessed after being cast to void and will result in a compile-time error.

Data is a variable bit width, raw binary data type. Anything can cast to it,
and it can cast to any standard Flux type like char, int, float.
It is intended to allow Flux programmers to build complex custom types to
fit their needs that are flexible.


All standard types are built from the data type.
These types are defined in the standard library.

int is defined as `signed data {32} int;`
uint is defined as `unsigned data {32} uint;`
bit is defined as `signed data {1} bit;`
char is defined as `signed data {8} char;`
float is defined as `signed data {64} float;`
string is defined as `signed data{8}[] string;`


**Templates:**
```
template <T> myMax(T x, T y) -> !void  // Must always be !void for templates.
{
    return (x > y) ? x : y;
};
```


Keyword list:
as, asm, and, break, case, catch, class, const, continue, data, def, default, do
else, enum, false, for, if, import, is, namespace, not, object, op, operator,
or, return, signed, sizeof, struct, super, switch, template, this, throw, true,
try, typeof, unsigned, using, void, while, xor


Literal types:
array, dictionary, integer, float, string


Types:
data, list, dict, void, const


Member access .
Scope resolution ::
Function call (), array subscript []
Prefix/Postfix increment/decrement ++, --
Unary plus/minus +, -
Logical NOT and bitwise NOT !, ~
Address-of and dereference &, *
Type casting (type)
Exponentiation **
Multiplication, division, modulo *, /, %
Addition, subtraction +, -
Bit shift <<, >>
Relational <, <=, >, >=
Equality, inequality ==, !=
Identity is, not, as
Bitwise AND &
Bitwise XOR ^
Bitwise OR |
Logical AND and, &&
Logical OR or, ||
Conditional expression ? :
Assignment =, +=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>=, **=
Comma operator ,