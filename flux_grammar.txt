<program> ::= <global_item>*

<global_item> ::= <function_def>
                | <namespace_def>
                | <object_def>
                | <struct_def>
                | <template_def>
                | <operator_def>
                | <import_stmt>
                | <using_stmt>
                | <variable_decl> ";"

<import_stmt> ::= "import" <string_literal> "as" <identifier> ";"
                | "import" <string_literal> ";"

<using_stmt> ::= "using" <using_list> ";"

<using_list> ::= <namespace_access> ("," <namespace_access>)*

<namespace_access> ::= <identifier> ("::" <identifier>)*

<namespace_def> ::= "namespace" <identifier> "{" <namespace_body> "}" ";"

<namespace_body> ::= <object_def>*

<function_def> ::= "def" <identifier> "(" <parameter_list>? ")" "->" <type_spec> "{" <stmt_list> "}" ";"

<parameter_list> ::= <parameter> ("," <parameter>)*

<parameter> ::= <type_spec> <identifier>

<object_def> ::= "object" <identifier> <inheritance>? "{" <object_body> "}" ";"
               | "object" <identifier> ";"

<inheritance> ::= ":" <inheritance_list>

<inheritance_list> ::= <inheritance_item> ("," <inheritance_item>)*

<inheritance_item> ::= <identifier>
                     | "!" <identifier>

<object_body> ::= <object_member>*

<object_member> ::= <variable_decl> ";"
                  | <method_def>

<method_def> ::= "def" <magic_method> "(" <parameter_list>? ")" "->" <type_spec> "{" <stmt_list> "}" ";"
               | "def" <identifier> "(" <parameter_list>? ")" "->" <type_spec> "{" <stmt_list> "}" ";"

<magic_method> ::= "__new" | "__init" | "__exit" | "__expr" | "__eq" | "__ee" | "__ne" | "__le" | "__ge" 
                 | "__lt" | "__gt" | "__add" | "__sub" | "__inc" | "__dec" | "__mul" | "__div" | "__iadd"
                 | "__isub" | "__imul" | "__idiv" | "__mod" | "__pow" | "__imod" | "__ipow" | "__ls" | "__rs"
                 | "__and" | "__or" | "__xor" | "__nand" | "__nor" | "__xand" | "__xnor" | "__xnand"
                 | "__band" | "__bor" | "__bxor" | "__bnand" | "__bnor" | "__bxand" | "__bxnor" | "__bxnand"
                 | "__andeq" | "__oreq" | "__xoreq" | "__nandeq" | "__noreq" | "__xandeq" | "__xnoreq"
                 | "__xnandeq" | "__bandeq" | "__boreq" | "__bxoreq" | "__bnandeq" | "__bnoreq"
                 | "__bxandeq" | "__bxnoreq" | "__bxnandeq"

<struct_def> ::= "struct" <identifier> "{" <struct_body> "}" ";"

<struct_body> ::= <struct_member>*

<struct_member> ::= <variable_decl> ";"

<template_def> ::= <function_template>
                 | <object_template>
                 | <struct_template>
                 | <operator_template>
                 | <for_template>
                 | <async_template>
                 | <switch_template>

<function_template> ::= <volatile>? "template" "<" <template_params> ">" <identifier> "(" <parameter_list>? ")" "->" <type_spec> "{" <stmt_list> "}" ";"

<object_template> ::= <volatile>? "object" "template" "<" <template_params> ">" <identifier> <inheritance>? "{" <object_body> "}" ";"

<struct_template> ::= <volatile>? "struct" "template" "<" <template_params> ">" <identifier> "{" <struct_body> "}" ";"

<operator_template> ::= <volatile>? "operator" "template" "<" <template_params> ">" "(" <parameter_list> ")" "[" <custom_op> "]" "->" <type_spec> "{" <stmt_list> "}" ";"

<for_template> ::= <volatile>? "for" "template" "<" <template_params> ">" <identifier> "(" <for_init> ";" <expression> ";" <for_update> ")" ":" <template_param> "*" "{" <stmt_list> "}" ";"

<async_template> ::= <volatile>? "async" "template" "<" <template_params> ">" <identifier> "(" <parameter_list>? ")" "->" <type_spec> "{" <stmt_list> "}" ";"

<switch_template> ::= <volatile>? "switch" "template" "<" <template_params> ">" <identifier> "(" <parameter_list> ")" ":" <template_param> "*" "{" <case_list> "}" ";"

<template_params> ::= <template_param> ("," <template_param>)*

<template_param> ::= <identifier>

<volatile> ::= "volatile"

<operator_def> ::= "operator" "(" <parameter_list> ")" "[" <custom_op> "]" "->" <type_spec> "{" <stmt_list> "}" ";"

<custom_op> ::= <identifier>

<type_spec> ::= <base_type>
              | <pointer_type>
              | <array_type>
              | <template_type>
              | <qualified_type>

<base_type> ::= "int" | "float" | "char" | "void" | "bool"
              | "data" "{" <integer_literal> "}"
              | <identifier>

<pointer_type> ::= <type_spec> "*"

<array_type> ::= <type_spec> "[" "]"
               | <type_spec> "[" "[" "]" "]"

<template_type> ::= <identifier> "<" <type_list> ">"

<type_list> ::= <type_spec> ("," <type_spec>)*

<qualified_type> ::= <type_qualifier> <type_spec>

<type_qualifier> ::= "const" | "volatile" | "signed" | "unsigned"

<stmt_list> ::= <statement>*

<statement> ::= <expression_stmt>
              | <variable_decl> ";"
              | <if_stmt>
              | <while_stmt>
              | <do_while_stmt>
              | <for_stmt>
              | <switch_stmt>
              | <break_stmt>
              | <continue_stmt>
              | <return_stmt>
              | <try_catch_stmt>
              | <throw_stmt>
              | <assert_stmt>
              | <asm_stmt>
              | <block_stmt>

<expression_stmt> ::= <expression> ";"

<variable_decl> ::= <type_spec> <variable_list>
                  | "auto" "{" <identifier_list> "}" "=" <expression> "{" <identifier_list> "}"

<variable_list> ::= <variable_init> ("," <variable_init>)*

<variable_init> ::= <identifier>
                  | <identifier> "=" <expression>
                  | <identifier> "(" <argument_list>? ")"

<identifier_list> ::= <identifier> ("," <identifier>)*

<if_stmt> ::= "if" "(" <expression> ")" "{" <stmt_list> "}" <else_clause>? ";"

<else_clause> ::= "else" <if_stmt>
                | "else" "{" <stmt_list> "}"

<while_stmt> ::= "while" "(" <expression> ")" "{" <stmt_list> "}" ";"

<do_while_stmt> ::= "do" "{" <stmt_list> "}" "while" "(" <expression> ")" ";"

<for_stmt> ::= "for" "(" <for_init> ";" <expression> ";" <for_update> ")" "{" <stmt_list> "}" ";"
             | "for" "(" <identifier> "in" <expression> ")" "{" <stmt_list> "}" ";"

<for_init> ::= <variable_decl>
             | <expression>
             | ""

<for_update> ::= <expression>
               | ""

<switch_stmt> ::= "switch" "(" <expression> ")" "{" <case_list> "}" ";"

<case_list> ::= <case_item>*

<case_item> ::= "case" "(" <expression> ")" "{" <stmt_list> "}" ";"
              | "case" "(" ")" "{" <stmt_list> "}" ";"
              | "default" "{" <stmt_list> "}" ";"

<break_stmt> ::= "break" ";"

<continue_stmt> ::= "continue" ";"

<return_stmt> ::= "return" <expression>? ";"

<try_catch_stmt> ::= "try" "{" <stmt_list> "}" <catch_clause>+ ";"

<catch_clause> ::= "catch" "(" <parameter> ")" "{" <stmt_list> "}"

<throw_stmt> ::= "throw" <expression> ";"

<assert_stmt> ::= "assert" "(" <expression> ")" ";"

<asm_stmt> ::= "asm" "{" <asm_code> "}" ";"

<asm_code> ::= <any_characters>

<block_stmt> ::= "{" <stmt_list> "}" ";"

<expression> ::= <assignment_expr>

<assignment_expr> ::= <conditional_expr>
                    | <unary_expr> <assignment_op> <assignment_expr>

<assignment_op> ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "^=" | "&=" | "|=" | "^^=" | "<<=" | ">>="
                  | "`&&=" | "`!&=" | "`|=" | "`!|=" | "`^=" | "`!="

<conditional_expr> ::= <logical_or_expr>
                     | <logical_or_expr> "?" <expression> ":" <conditional_expr>

<logical_or_expr> ::= <logical_and_expr>
                    | <logical_or_expr> <logical_or_op> <logical_and_expr>

<logical_or_op> ::= "or" | "||" | "!|"

<logical_and_expr> ::= <bitwise_or_expr>
                     | <logical_and_expr> <logical_and_op> <bitwise_or_expr>

<logical_and_op> ::= "and" | "&&" | "!&"

<bitwise_or_expr> ::= <bitwise_xor_expr>
                    | <bitwise_or_expr> <bitwise_or_op> <bitwise_xor_expr>

<bitwise_or_op> ::= "|" | "`|" | "`!|"

<bitwise_xor_expr> ::= <bitwise_and_expr>
                     | <bitwise_xor_expr> <bitwise_xor_op> <bitwise_and_expr>

<bitwise_xor_op> ::= "^^" | "xor" | "`^^" | "`^!|"

<bitwise_and_expr> ::= <identity_expr>
                     | <bitwise_and_expr> <bitwise_and_op> <identity_expr>

<bitwise_and_op> ::= "&" | "`&&" | "`!&" | "`^&" | "`^!&"

<identity_expr> ::= <equality_expr>
                  | <identity_expr> <identity_op> <equality_expr>

<identity_op> ::= "is" | "not" | "as"

<equality_expr> ::= <relational_expr>
                  | <equality_expr> <equality_op> <relational_expr>

<equality_op> ::= "==" | "!="

<relational_expr> ::= <shift_expr>
                    | <relational_expr> <relational_op> <shift_expr>

<relational_op> ::= "<" | "<=" | ">" | ">=" | "in"

<shift_expr> ::= <additive_expr>
               | <shift_expr> <shift_op> <additive_expr>

<shift_op> ::= "<<" | ">>"

<additive_expr> ::= <multiplicative_expr>
                  | <additive_expr> <additive_op> <multiplicative_expr>

<additive_op> ::= "+" | "-"

<multiplicative_expr> ::= <exponential_expr>
                        | <multiplicative_expr> <multiplicative_op> <exponential_expr>

<multiplicative_op> ::= "*" | "/" | "%"

<exponential_expr> ::= <cast_expr>
                     | <exponential_expr> "^" <cast_expr>

<cast_expr> ::= <unary_expr>
              | "(" <type_spec> ")" <cast_expr>

<unary_expr> ::= <postfix_expr>
               | <unary_op> <unary_expr>

<unary_op> ::= "++" | "--" | "+" | "-" | "!" | "~" | "@" | "*" | "not" | "sizeof" | "typeof"

<postfix_expr> ::= <primary_expr>
                 | <postfix_expr> "[" <expression> "]"
                 | <postfix_expr> "(" <argument_list>? ")"
                 | <postfix_expr> "." <identifier>
                 | <postfix_expr> "::" <identifier>
                 | <postfix_expr> "++"
                 | <postfix_expr> "--"

<primary_expr> ::= <identifier>
                 | <literal>
                 | "(" <expression> ")"
                 | <array_literal>
                 | <array_comprehension>
                 | <i_string>
                 | <template_instantiation>
                 | "this"
                 | "_"

<template_instantiation> ::= <identifier> "<" <type_list> ">"

<array_literal> ::= "[" <expression_list>? "]"

<expression_list> ::= <expression> ("," <expression>)*

<array_comprehension> ::= "[" <expression> "for" "(" <identifier> "in" <expression> ")" <comprehension_condition>? "]"

<comprehension_condition> ::= "if" "(" <expression> ")"

<i_string> ::= "i" <string_literal> ":" "{" <expression_list> "}" ";"

<argument_list> ::= <expression> ("," <expression>)*

<literal> ::= <integer_literal>
            | <float_literal>
            | <char_literal>
            | <string_literal>
            | <boolean_literal>
            | <data_literal>

<integer_literal> ::= <digit>+ | "0x" <hex_digit>+ | <digit>+ "b"

<float_literal> ::= <digit>+ "." <digit>+ | <digit>+ "." | "." <digit>+

<char_literal> ::= "'" <character> "'"

<string_literal> ::= "\"" <string_content>* "\""

<boolean_literal> ::= "true" | "false"

<data_literal> ::= <binary_digits> "b"

<binary_digits> ::= ("0" | "1")+

<identifier> ::= <letter> (<letter> | <digit>)*

<letter> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" 
           | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
           | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M"
           | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
           | "_"

<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<hex_digit> ::= <digit> | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F"

<character> ::= <any_printable_character> | <escape_sequence>

<escape_sequence> ::= "\\" | "\'" | "\"" | "\n" | "\t" | "\r" | "\0"

<string_content> ::= <character> | <any_character_except_quote>

<any_characters> ::= <any_character>*

<any_character> ::= <letter> | <digit> | <symbol>

<symbol> ::= "!" | "@" | "#" | "$" | "%" | "^" | "&" | "*" | "(" | ")" | "-" | "_" | "+"
           | "=" | "{" | "}" | "[" | "]" | "|" | "\\" | ":" | ";" | "\"" | "'" | "<" | ">"
           | "," | "." | "?" | "/" | "`" | "~" | " " | "\t" | "\n" | "\r"