Flux is a mix of C++, Zig, and Python, and has a slightly more strict syntax than C++ or Zig.

Flux gets its name from flux or solder paste used to clean in preparation for soldering,
ie to perform electrical engineering. Programming in Flux is clearly good for your computer.

A Flux program must have a main() function, and must be defined in global scope.

**Function definition:**
```
def name (parameters) -> return_type
{
	return return_value;                      // A `return` statement must be found somewhere within a function body.
};

// Example function
def myAdd(int x, int y) -> int
{
	return x + y;
};

// Overloading
def myAdd(float x, float y) -> float
{
	return x + y;
}
```

**Namespaces:**
Definition: `namespace myNamespace {};`
Scope access: `myNamespace::myMember;`

Namespace example:
```
namespace std
{
	object myObj1
	{
		def __init() -> this
		{
			return;
		};

		def __exit() -> void
		{
			return;
		};
	};
};

namespace std                         // namespace std now has myObj1 and myObj2
{
	object myObj2
	{
		def __init() -> this
		{
			return;
		};

		def __exit() -> void
		{
			return;
		};
	};
};
```

Namespaces **MUST** be in global scope.
Duplicate namespace definitions do not redefine the namespace, the members
of both combine as if they were one namespace. This is so the standard
library or any library can have a core namespace across multiple files.
Namespaces are the only container that have this functionality.
Namespaces can only directly contain objects at their root scope.

**Objects:**
Prototype / forward declaration: `object myObj;`
Definition: `object myObj {};`
Instance: `myObj newObj;`
Member access: `newObj.x`

Magic Methods:
```
// `this` never needs to be a parameter as it is always local to its object.
__new()        -> this
__init()       -> this               Example: thisObj newObj();
__exit()       -> void
__expr()       -> // user-defined    Example: print(someObj);          // Result: user-defined gets printed
__eq()         -> // user-defined =  Example: someObj newObj = oldObj; // Result: user-defined gets assigned to newObj
__ee()         -> // user-defined ==
__ne()         -> // user-defined !=
__le()         -> // user-defined <=
__ge()         -> // user-defined >=
__lt()         -> // user-defined <
__gt()         -> // user-defined >
__add()        -> // user-defined +
__sub()        -> // user-defined -
__inc()        -> // user-defined ++
__dec()        -> // user-defined --
__mul()        -> // user-defined *
__div()        -> // user-defined /
__iadd()       -> // user-defined +=
__isub()       -> // user-defined -=
__imul()       -> // user-defined *=
__idiv()       -> // user-defined /=
__mod()        -> // user-defined %
__pow()        -> // user-defined ^
__imod()       -> // user-defined %=
__ipow()       -> // user-defined ^=
__ls()         -> // user-defined (left-shift)
__rs()         -> // user-defined (right-shift)
__and()        -> // user-defined && / and
__or()         -> // user-defined || / or
__xor()        -> // user-defined ^^ / xor
__nand()
__nor()
__xand()
__xnor()
__xnand()
__band()
__bor()
__bxor()
__bnand()
__bnor()
__bxand()
__bxnor()
__bxnand()
__andeq()
__oreq()
__xoreq()
__nandeq()
__noreq()
__xandeq()
__xnoreq()
__xnandeq()
__bandeq()
__boreq()
__bxoreq()
__bnandeq()
__bnoreq()
__bxandeq()
__bxnoreq()
__bxnandeq()
```

Example usage:
```
import "standard.fx" as std;

using std::io, std::types;

object myObj
{
	int a, b;
	def __init(int x, int y) -> this
	{
		this.a = x;                           // __init is a special method, and is the constructor function
		this.b = y;                           // you must always specify "this" as the -> return type
		return;                               // but you do not need to return anything here.
	};

	def __exit() -> void
	{
		return;                                   // __exit is a special method, and is the destructor function
	};
};

myObj testObject(3,5);
```

Inheritance:
```
object anotherObj : myObj     // Exclusion would be !myObj, and you can include or exclude in the same list of identifiers separated
{                             // by commas, so you could do `object myObj : someObj, !thatObj, !otherObj {};`
	def __init() -> this
	{
		myObj newObj(10,2);
		return;
	};

	def __exit() -> void
	{
		return;
	};
};
```

Objects cannot be defined inside of a function, they must be within a namespace, another object, or global scope.
`__init` is always called on object instantiation. `__exit` is always called on object destruction, or called manually to destroy the object.

Structs can contain instances of objects.
Structs cannot contain functions, templates, or anonymous blocks, but they may contain pointers to functions and templates.

**struct example:**
```
struct myStruct
{
	myObject newObj1, newObj2;
};

struct newStruct
{
	myStruct xStruct;              // structs can contain structs
}
```


If a function's return type is void nothing will be returned, regardless if your return statement provides something.
Functions cannot contain object or struct definitions. This is to maintain code legibility and organization.

You can also use in-line assembly directly:

```
asm {
mov eax, 1
mov ebx, 0
int 0x80
};
```

Python uses f-strings, C++ uses a complicated format, Zig syntax is overly verbose.
Flux uses "interpolated" strings, and tries to fix Zig's syntax a bit.
The syntax in Flux would be: `i"{}{}{}":{x;y;z;};`
The brackets are replaced with the results of the statements in order respective
to the statements' position in the statement array.

**i-string Example:**
```
import "standard.fx" as std;

using std::io, std::types;

def bar() -> string { return "World"; };    // We get the basic string type from the types module
print(i"Hello {} {}" : // whitespace is ignored
              {
              	bar() + "!";
                "test";
              }                             // Whitespace is ignored, this is just for positioning
     );
x = i"Bar {}":{bar()};                      // Bar World!
```

This allows you to write clean interpolated strings without strange formatting.
Every code block must be ended with a semicolon. The only exception is within the i-string "quoted {} injected {} text"


Example 2:
```
import "standard.fx" as std;

using std::io, std::types;

def concat(string a, string b) -> string
{
    return a+b;           // array concatination is native so we really don't need this function
};

def main() -> int
{
    string h = "Hello ";
    string w = "World";   // strings are arrays of data{8} (bytes), so we can do `w[3] == 'l'`
    string x = "of ";
    string y = "Coding";
    print(i"{} {}":{concat(h,w);concat(x,y);});
    return 0;
};
```
Result: Hello World of Coding

Pointers:
```
string a = "Test";
string* pa = @a;
*pa += "ing!";
print(a);
// Result: "Testing!"


// Pointers to variables:
int idata = 0;
int *p_idata = @idata;

*p_idata += 3;
print(idata);  // 3


// Pointers to functions:
def add(int x, int y) -> int
{
	return x + y;
};

def sub(int x, int y) -> int
{
	return x - y;
};

int *p_add(int,int) = @add;  // Similar to C++ syntax
int *p_sub(int,int) = @sub;

print(*p_add(0,3)); // 3
print(*p_sub(5,2)); // -3

// Function pointer array
int[]* func_list = [*p_add,*p_sub];

func_list[0](1,1);  // 2

// Pointers to objects, structs, arrays:
object    myObj {};                 // Definition
object* p_myObj = @myObj;           // Pointer

struct    myStruct {};              // Definition
struct* p_myStruct = @myStruct;     // Pointer

int[]   i_array;                    // Definition
int[]* pi_array = @i_array;         // Pointer


// Pointer Arithmetic:
import "standard.fx" as std;

using std::io, std::types;

def main() -> int
{
    int[] arr = [10, 20, 30, 40, 50];
    int *ptr = arr;                         // ptr points to the first element of arr
    
    std::cout << "Value at ptr: " << *ptr << std::endl; // Output: 10
    
    ptr++;    // Increment ptr to point to the next element
    std::cout << "Value at ptr: " << *ptr << std::endl; // Output: 20
    
    ptr += 2; // Increment ptr by 2 positions
    std::cout << "Value at ptr: " << *ptr << std::endl; // Output: 40
    
    int *ptr2 = &arr[4]; // ptr2 points to the last element of arr
    std::cout << "Elements between ptr and ptr2: " << ptr2 - ptr << std::endl; // Output: 1
    
    return 0;
};
```


**Recursive function:**
```
def rsub(int x, int y) -> int
{
	if (x == 0 || y == 0) { return 0; };

	rsub(--x,--y);
};
```


Import
```
import "standard.fx" as std;
using std::io, std::types;          // Only use `io` from standard.fx (standard.fx imports `input.fx` and `output.fx`
//import "math.fx";                 // Direct import of all the contents of math.fx as if the source replaced this line
```


Example of the `data` type and casting:
```
import "standard.fx" as std;                  // `std` becomes an immutable identifier
using std::types;                             // Standard types like int, uint, and so on.

byte someByte = 01000001b;                  // "A" but in binary
string somestring = (string)((char)someByte); // "A"
// Back to data
somestring = (data)somestring;                // 01000001b
string anotherstring = "B";                   // 01000010b

somestring<<;                                 // 10000100b  // Bit-shift left  (binary doubling)
somestring>>;                                 // 01000010b  // Bit-shift right (binary halving)

string newstring = flip(somestring);          // 10111101b  // flip method not provided but does bit flipping
newstring = somestring xor anotherstring;     // 00000000b  // XOR two or more values

// This 0's out all the data and re-casts back to data from void.
// The temporary void casted type is the same width as the original type.
data v = (void)somestring;                    // 00000000b

// We can write anything in the datafield

object someObject
{
	string x = "Hello World!";                // 12 bytes long (96 bits)
	data {3} some3bitDatatype;                // 3 bits long
};

data d_someObject = (void)someObject          // 99 bits long

someObject nulled = (void)o_newInst;          // You can only void instances of objects or structs

// The same casting behavior applies to objects and structs
```

Casting anything to `void` is the functional equivalent of nulling the memory occupied by that thing.
If the width of the data type is 512 bits, that many bits will be nulled.

Data is a variable bit width, primitive binary data type. Anything can cast to it,
and it can cast to any literal Flux type like string, int, or float.
It is intended to allow Flux programmers to build complex custom types to
fit their needs that are flexible.


**types.fx module:**
// Included in `standard.fx`
```
// The standard types found in Flux that are not included keywords
signed   data{32}  int;
unsigned data{32} uint;
int[]   inta;
uint[] uinta;
signed   data{64}  i64;
unsigned data{64} ui64;
i64[]   i64a;
ui64[] ui64a;
```


**typeof and sizeof:**
```
print(typeof(int));
print(sizeof(bool));
print(sizeof(int));
print(sizeof(ufloat));
//print(sizeof(int));   // Platform dependent
//print(sizeof(float)); // Platform dependent
print(sizeof(string));
```
Result:
```
signed data{32}
1
32
64
8
```


**Structs:**
```
// structs are packed and have no padding naturally
// there is no way to change this.
// You add your own padding data structures manually.
struct myStruct {
    unsigned data {8} status;
    unsigned data {32} address;
};
```


**Example of bare-metal register access:**
```
// Define a struct for a hardware register map
struct GPIORegisters {
    unsigned data {32} control;
    unsigned data {32} status;
    unsigned data {64} buffer;
};

// Map to a fixed hardware address
volatile const GPIORegisters* GPIO = @0x40000000;

def main() -> int {
    GPIO.control = 0x1;  // Write to control register (aligned access)
    asm { cli };         // Disable interrupts (assembly inline)
    return 0;
};
```


**The void keyword:**
void is equivalent to Python's None as well as C++'s void and can be used in both contexts such as:
```
if (x is void) {...code...};
void x;
```


Flux allows defining custom operators with `operator` and their use in code like any other operator.
You cannot redefine Flux built-in operators (+,-,*,/,&,==,+=,++,-=,-- etc) unless they are overloaded
meaning the parameter types of the left and right hand sides are different than the natural types.
This allows for you to write `newObj = myObj1 + myObj2;` syntax without any errors being thrown
You define operators in the following manner:
```
operator(int x, int y)[e+] -> float  // Or any return type
{
	return (x * (10 ^^ y))
};

operator(int x, int y)[e-] -> float
{
    return (x * (10 ^^ (y * -1)))
};

// To use an operator in code, you write:
def main() -> int
{
	print(1 e+ 20); // Result of (1 * 10^20) - 1
	return 0;
};

(1 e+ 20) e- (1 e+ 20);   // (1 * 10^20) * (10 ^ ((1 * 10^20) * -1)) equivalent
```


**Templates:**
```
// Function templates
template <T> myMax(T x, T y) -> T
{
    return (x > y) ? x : y;
};
// Usage
k = myMax<int>(5,10);             // 10

template <V,K,R> someFunc(V x, K y) -> R
{
	return (R)x*y;
};
// Usage
n = someFunc<int,int,string>(5,10); // "50"

// Pointer to template function:
template* <T> tp_myMax(T,T) = @myMax;


// Object Templates:
object template <T> MyObject  // `<T>` declares template parameters
{
	T value;  // Template-typed member
    def __init(T x) -> this
    {
    	assert(typeof(T)==int);
        this.value = x;
        return;
    };
};

// Instantiation:
MyObject<int>   obj1(4);              // obj1.value = 4    | typeof(int)
MyObject<float> obj2(3.14);           // obj2.value = 3.14 | typeof(float)

// Inheritance:
object template <U> ChildObject : MyObject<U>   // Explicit parameter binding to inheritance from templated object
// object template <U> ChildObject : MyObject<> // Default parameter binding (U) to inheritance from templated object
                                                // In the default cause, the number of parameters MUST be equal.
{
	U y;

    def __init(U x, U y) -> this
    {
        U super.MyObject<U> newObj(x);  // Explicit parent init
        this.y = y;
        return;
    };

    def __exit() -> void
    {
    	return;
    };

    template <T> myFunc(T x) -> U
    {
    	return (U<x>)x;
    };
};
// Usage
ChildObject<int> child(3, 4);  // `U` = `int`, parent `T` = `int`

// Struct templates
struct template <T> tStruct
{
	T x, y;
};
// Usage
tStruct<i64> s = {x = 5, y = 10};

// Operator templates
operator template <T> (T x, T y) [v+] -> T
{
	// some custom operator template code
};
// Usage:
int x = 3 v+<int> 5;

// For templates
// These are a bit different, for templates MUST have two syntactic parameters.
// The first is your magic value of the loop, ie, some counter or conditional value
// The second is a pointer to data you want this loop to have access to, because for templates are named and callable
// In this example, U* is that pointer.
for template<T> myForLoop(T x = 0; x < 10; x++) : U*    // T is primary and mandatory, U is secondary and mandatory
{
	// some custom for template loop
	// U*: pointer to some data we want to have scope of
};
// Usage
myForLoop<int> : *someData;    // Call the loop

// Async templates
async template <T> myAsyncTemplateFunc(T x) -> T
{
	// ... code ...
	return x;	
};
// Usage
int x = await myAsyncTemplateFunc<int>(100);

// Switch templates
switch template <T> mySwitch(T x) : U*            // T is primary and mandatory, U is secondary and optional
{
	case (0)
	{...};
	case (1)
	{...};
	case ()   // Empty case denotes default case
	{...};
};
// Usage
mySwitch<int>(someValue) : *y;

// Volatile templates
// Any template can be a volatile template
//
// volatile template<T> myMax(T x, T y) {};
// volatile object template<T> myObj {};
// volatile struct template<T> myStru {};
// volatile operator template<T> (T x, T y) [vx+] -> T {};
// volatile for template<T> myLoop(...) : U* -> T {};
// volatile async template<T> myFunc(T x) -> T {};
```

Template shadowing is allowed and there will be no warning for it. It is assumed you know
what you are doing. Any inner T refers to the nearest outer T, if none exists and is not
used in code somewhere, then and only then is it a compiler error because T won't exist.
You do not need to use `super.T;`.

Functions cannot be defined inside of functions unless they are written anonymously such as
declaring a variable equal to an anonymous code block like `void x = {return;};` or writing
an anonymous block somewhere in the function; anonymous blocks execute in-line.

You cannot put template functions inside of template functions because they are functions.

You can put object templates inside object templates, and functions inside object templates,
or even templates inside of object templates, but no named functions inside of functions, ever.


**Arrays:**
```
import "standard.fx" as std;
using std::io, std::types;

int[] ia_myArray = [3, 92, 14, 30, 6, 5, 11, 400];

// int undefined_behavior = ia_myArray[10];          // Length is only 8, accessing index 11

int[] ia_mySorted = [];
int tmp, lowest;

def len(int[] array) -> int
{
	return sizeof(array) / 32;
}

for (x in ia_myArray)
{
	if (x < _.next())   // `_` denotes `ia_myArray` which is iterable
	{
		x in ia_mySorted ? continue : ia_mySorted.append(x);
	};

	if (len(ia_myArray) < len(ia_mySorted))    // Lengths unequal, not done sorting
	{
		_.setpos(0);    // Reset the iterator position to 0, allowing the loop to continue, setpos is a special function
	}
	else if (len(ia_myArray) == len(ia_mySorted))
	{
		break;
	};
};
```

**Array Comprehension:**
```
// Basic comprehension
int[] squares = [x ^ 2 for (x in 1..10)];

// With condition
int[] evens = [x for (x in 1..20) if (x % 2 == 0)];

// Multi-dimensional
int[[]] matrix = [[i * j for (j in 1..5)] for (i in 1..5)];
int[][] also2D = [i * j for (j in 10..50)][i * j for (j in 100..500)];

// With type conversion
float[] floats = [(float)x for (x in int_array)];
```

**Destructuring:**
```
struct Point { int x; int y; };

Point myPoint = {x = 10, y = 20};

auto {t, m} = myPoint{x,y};     // int   t=10,   int    m=20
```

**Casting:**
```
//(type)identifier

int x = 5;
string y = (string)x;   // "5"
```

Keyword list:
```
and, as, asm, assert, async, auto, await, break, case, catch, const, continue, data,
def, default, do, else, enum, false, float, for, if, import, in, int, is, namespace,
not, object, operator, or, return, signed, sizeof, struct, super, switch, template,
this, throw, true, try, typeof, unsigned, using, void, volatile, while, xor
```


Literal types:
int `5`, float `3.14`, char `"B"` /*66*/ - `65` /*'A'*/

================================================================================
                        FLUX OPERATOR PRECEDENCE TABLE
                              (Highest to Lowest)
================================================================================

Level | Operators                                                        | Assoc | Description
------|------------------------------------------------------------------|-------|------------------
  1   | () [] . ::                                                       | Left  | Primary expressions
  2   | ++ -- (postfix)                                                  | Left  | Postfix inc/dec
  3   | ++ -- (prefix) + - ! ~ @ * not sizeof typeof                     | Right | Unary operators
  4   | (type)                                                           | Right | Type casting
  5   | ^                                                                | Right | Exponentiation
  6   | * / %                                                            | Left  | Multiplicative
  7   | + -                                                              | Left  | Additive
  8   | << >>                                                            | Left  | Bit shift
  9   | < <= > >= in                                                     | Left  | Relational
 10   | == !=                                                            | Left  | Equality
 11   | is not as                                                        | Left  | Identity
 12   | & `&& `!& `^& `^!&                                               | Left  | Bitwise AND variants
 13   | ^^ xor `^^ `^!|                                                  | Left  | Bitwise XOR variants
 14   | | `| `!|                                                         | Left  | Bitwise OR variants
 15   | and && !&                                                        | Left  | Logical AND/NAND
 16   | or || !|                                                         | Left  | Logical OR/NOR
 17   | ?:                                                               | Right | Conditional
 18   | = += -= *= /= %= ^= &= |= ^^= <<= >>= `&&= `!&= `|= `!|= `^= `!= | Right | Assignment
 19   | ,                                                                | Left  | Comma

================================================================================

## Operator Details

### Bitwise Operators (` prefix)
- `&& - Bitwise AND
- `!& - Bitwise NAND  
- `| - Bitwise OR
- `!| - Bitwise NOR
- `^^ - Bitwise XOR
- `^!| - Bitwise XNOR
- `^& - Bitwise XAND
- `^!& - Bitwise XNAND

### Logical Operators
- && / and - Logical AND
- !& - Logical NAND
- || / or - Logical OR  
- !| - Logical NOR
- ^^ / xor - Logical XOR
- ! / not - Logical NOT

### Assignment Operators
- = - Basic assignment
- += -= *= /= %= ^= - Arithmetic assignment
- <<= >>= - Shift assignment
- `&&= `!&= `|= `!|= `^= `!= - Bitwise assignment

================================================================================