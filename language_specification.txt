Flux is a mix of C++, Zig, and Python, and has a slightly more strict syntax than C++ or Zig.

Flux gets its name from flux or solder paste used to clean in preparation for soldering,
ie to perform electrical engineering. Programming in Flux is clearly good for your computer.

A Flux program must have a main() function, and must be defined in global scope.

**Function definition:**
```
def name (parameters) -> return_type
{
	return return_value;                      // A `return` statement must be found somewhere within a function body.
};

// Example function
def myAdd(i32 x, i32 y) -> int
{
	return x + y;
};

// Overloading
def myAdd(float x, float y) -> float
{
	return x + y;
}
```

**Namespaces:**
Definition: `namespace myNamespace {};`
Scope access: `myNamespace::myMember;`

Namespace example:
```
namespace std
{
	object myObj1
	{
		def __init() -> this
		{
			return;
		};

		def __exit() -> void
		{
			return;
		};
	};
};

namespace std                         // namespace std now has myObj1 and myObj2
{
	object myObj2
	{
		def __init() -> this
		{
			return;
		};

		def __exit() -> void
		{
			return;
		};
	};
};
```

Namespaces **MUST** be in global scope.
Duplicate namespace definitions do not redefine the namespace, the members
of both combine as if they were one namespace. This is so the standard
library or any library can have a core namespace across multiple files.
Namespaces are the only container that have this functionality.
Namespaces can only directly contain objects at their root scope.

**Objects:**
Prototype / forward declaration: `object myObj;`
Definition: `object myObj {};`
Instance: `myObj newObj;`
Member access: `newObj.x`

Example usage:
```
import "standard.fx" as std;

using std::io, std::types;

object myObj
{
	def __init(i32 x, i32 y) -> this
	{
		i32 this.a = x;                           // __init is a special method, and is the constructor function
		i32 this.b = y;                           // you must always specify "this" as the -> return type
		return;                                   // but you do not need to return anything here.
	};

	def __exit() -> void
	{
		return;                                   // __exit is a special method, and is the destructor function
	};
};

myObj testObject(3,5);
```

Inheritance:
```
object anotherObj : myObj     // Exclusion would be !myObj, and you can include or exclude in the same list of identifiers separated
{                             // by commas
	def __init() -> this
	{
		myObj newObj(10,2);
		return;
	};

	def __exit() -> void
	{
		return;
	};
};
```

Objects cannot be defined inside of a function, they must be within a namespace, another object, or global scope.
`__init` is always called on object instantiation. `__exit` is always called on object destruction, or called manually to destroy the object.

Objects and structs cannot be defined inside of functions and this
is to make functions cleanly written. You can define them globally,
or organize them into a namespace, but not in functions. You can
put instances of objects and structs in functions but no definitions of the two.

Structs can contain instances of objects.
Structs cannot contain functions, templates, or anonymous blocks, but they may contain pointers to functions and templates.

**struct example:**
```
struct myStruct
{
	myObject newObj1, newObj2;
};

struct newStruct
{
	myStruct xStruct;              // structs can contain structs
}
```


If a function's return type is void nothing will be returned, regardless if your return statement provides something.
Functions cannot contain object or struct definitions. This is to maintain code legibility and organization.

You can also use in-line assembly directly:

```
asm {
mov eax, 1
mov ebx, 0
int 0x80
};
```

Python uses f-strings, C++ uses a complicated format, Zig syntax is overly verbose.
Flux uses "interpolated" strings, and tries to fix Zig's syntax a bit.
The syntax in Flux would be: `i"{}{}{}":{x;y;z;};`
The brackets are replaced with the results of the statements in order respective
to the statements' position in the statement array.

**i-string Example:**
```
import "standard.fx" as std;

using std::io, std::types;

def bar() -> string { return "World"; };    // We get the basic string type from the types module
print(i"Hello {} {}":
              {
              	bar() + "!";
                "test";
              };                            // Whitespace is ignored, this is just for positioning
     );
```

This allows you to write clean interpolated strings without strange formatting.
Every code block must be ended with a semicolon. The only exception is within the i-string "quoted {} injected {} text"


Example 2:
```
import "standard.fx" as std;

using std::io, std::types;

def concat(string a, string b) -> string
{
    return a+b;           // array concatination is native so we really don't need this function
};

def main() -> int
{
    string h = "Hello ";
    string w = "World";   // strings are arrays of data{8} (bytes), so we can do `w[3] == 'l'`
    string x = "of ";
    string y = "Coding";
    print(i"{} {}":{concat(h,w);concat(x,y);});
    return 0;
};
```
Result: Hello World of Coding

Pointers:
```
string a = "Test";
string* pa = @a;
*pa += "ing!";
print(a);
// Result: "Testing!"


// Pointers to variables:
i32 data = 0;
i32 *p_data = @data;

p_data += 3;
print(data);  // 3


// Pointers to functions:
def add(i32 x, i32 y) -> i32
{
	return x + y;
};

def sub(i32 x, i32 y) -> i32
{
	return x - y;
};

i32 *p_add(i32,i32) = @add;  // Similar to C++ syntax
i32 *p_sub(i32,i32) = @sub;

print(p_add(0,3)); // 3
print(p_sub(5,2)); // -3

array func_list = [p_add,p_sub];


// Pointers to objects, structs, arrays, and dictionaries:
object    myObj {};                 // Definition
object* p_myObj = @myObj;           // Pointer

struct    myStruct {};              // Definition
struct* p_myStruct = @myStruct;     // Pointer

i32[]   i_array;                    // Definition
i32[]* pi_array = @i_array;         // Pointer

// Base array type can contain any combination of element types.
array    array;                     // Definition
array* p_array = @array;            // Pointer

dict    myDict;                     // Definition
dict* p_myDict = @myDict;           // Pointer


// Pointer Arithmetic:
import "standard.fx" as std;

using std::io, std::types;

def main() -> i32
{
    i32[] arr = [10, 20, 30, 40, 50];
    i32 *ptr = arr;                         // ptr points to the first element of arr
    
    std::cout << "Value at ptr: " << *ptr << std::endl; // Output: 10
    
    ptr++; // Increment ptr to point to the next element
    std::cout << "Value at ptr: " << *ptr << std::endl; // Output: 20
    
    ptr += 2; // Increment ptr by 2 positions
    std::cout << "Value at ptr: " << *ptr << std::endl; // Output: 40
    
    i32 *ptr2 = &arr[4]; // ptr2 points to the last element of arr
    std::cout << "Elements between ptr and ptr2: " << ptr2 - ptr << std::endl; // Output: 1
    
    return 0;
};
```


**Recursive function:**
```
def rsub(i32 x, i32 y) -> i32
{
	if (x == 0 || y == 0) { return 0; };

	rsub(--x,--y);
};
```


Import
```
import "standard.fx" as std;
using std::io, std::types;          // Only use `io` from standard.fx (standard.fx imports `input.fx` and `output.fx`
//import "math.fx";                 // Direct import of all the contents of math.fx as if the source replaced this line
```


Example of the `data` type and casting:
```
import "standard.fx" as std;   // `std` becomes an immutable identifier
using std::types;         // Standard types like i32, ui32, float, ufloat, byte, sbyte, string, and so on.

byte someByte = {0, 1, 0, 0, 0, 0, 0, 1};     // "A" but in binary
string somestring = i"{}":{someByte;};        // "A"
// Back to data
somestring = (data)somestring;                // {0, 1, 0, 0, 0, 0, 0, 1}
string anotherstring = "B";                   // {0, 1, 0, 0, 0, 0, 1, 0}

somestring<<;                                 // {1, 0, 0, 0, 0, 1, 0, 0}  // Bit-shift left  (binary doubling)
somestring>>;                                 // {0, 1, 0, 0, 0, 0, 1, 0}  // Bit-shift right (binary halving)

string newstring = xor(somestring);           // {1, 0, 1, 1, 1, 1, 0, 1}  // Bit-flip (binary XOR)
newstring = xor(somestring,anotherstring);    // {0, 0, 0, 0, 0, 0, 0, 0}  // XOR two or more values

// This 0's out all the data and re-casts back to data from void.
// The temporary void casted type is the same width as the original type.
data v = (void)somestring;                     // {1, 1, 1, 1, 1, 1, 1, 1}

object someObject
{
	string x = "Hello World!";                 // 12 bytes long (96 bits)
	data {3} some3bitDatatype;                 // 3 bits long
};

data d_someObject = (void)someObject           // 99 bits long

someObject nulled = (void)o_newInst;           // You can only void instances of objects or structs

// The same casting behavior applies to objects and structs
```

Casting anything to `void` is the functional equivalent of nulling the memory occupied by that thing.
If the width of the data type is 512 bits, that many bits will be nulled and freed.

Data is a variable bit width, primitive binary data type. Anything can cast to it,
and it can cast to any standard Flux type like string, int, float, etcetera.
It is intended to allow Flux programmers to build complex custom types to
fit their needs that are flexible.

All standard Flux types are built from the data type.
These types are defined in the standard library:

bit is defined as `unsigned data {1} bit;`
bool is defined as `bit bool;`
true is defined as `bool true = 1;`
false is defined as `bool false = 0;`
i32 is defined as `signed data {32} i32;`
ui32 is defined as `unsigned data {32} ui32;`
float is defined as `signed data {64} float;`
ufloat is defined as `unsigned data {64} ufloat;`
string is defined as `unsigned data{8}[] string;`

Essentially you must include "standard.fx" and use std::types to have access to true and false,
otherwise programmatically you would write 1 or 0 in place of them respectively.

**typeof and sizeof:**
```
print(typeof(bit));
print(typeof(bool));
print(typeof(i32));
print(sizeof(bool));
print(sizeof(i32));
print(sizeof(ufloat));
```
Result:
```
unsigned data{1}
bit
signed data{32}
1
32
64
```


**Structs:**
```
// structs are packed and have no padding naturally
// there is no way to change this.
// You add your own padding data structures manually.
struct myStruct {
    unsigned data {8} status;
    unsigned data {32} address;
};
```


**Example of bare-metal register access:**
```
// Define a struct for a hardware register map
struct GPIORegisters {
    unsigned data {32} control;
    unsigned data {32} status;
    unsigned data {64} buffer;
};

// Map to a fixed hardware address
volatile const GPIORegisters* GPIO = @0x40000000;

def main() -> i32 {
    GPIO.control = 0x1;  // Write to control register (aligned access)
    asm { cli };         // Disable interrupts (assembly inline)
    return 0;
};
```


**The void keyword:**
void is equivalent to Python's None as well as C++'s void and can be used in both contexts such as:
```
if (x is void) {...code...};
void x;
```


**Templates:**
```
// Function templates
template <T> myMax(T x, T y) -> T
{
    return (x > y) ? x : y;
};

template <V,K,R> someFunc(V x, K y) -> R
{
	return (R)x*y;
};

// Pointer to template function:
template* <T> tp_myMax(T,T) = @myMax;


// Object Templates:
object template <T> MyObject  // `<T>` declares template parameters
{
	T value;  // Template-typed member
    def __init(T x) -> this
    {
    	assert(typeof(T)==i32);
        T this.value = x;
        return;
    };
};

// Instantiation:
MyObject<int> obj1;             // Explicit type binding
MyObject<float> obj2;           // Another type

// Inheritance:
object template <U> ChildObject : MyObject<U> // Inherit from templated object
{
	U y;

    def __init(U x, U y) -> this
    {
        U super.MyObject<U> newObj(x);  // Explicit parent init
        this.y = y;
        return;
    };

    def __exit() -> void
    {
    	return;
    };

    template <T> myFunc(T x) -> U
    {
    	return (U<x>)x;
    };
};

// Usage
ChildObject<myObject<i32>> child(3, 4);  // `U` = `i32`, parent `T` = `i32`

// Struct templates
struct template <T> tStruct
{
	T x, y;
};
```

Template shadowing is allowed and there will be no warning for it. It is assumed you know
what you are doing. Any inner T refers to the nearest outer T, if none exists and is not
used in code somewhere, then and only then is it a compiler error because T won't exist.
You do not need to use `super.T;`.

Functions cannot be defined inside of functions unless they are written anonymously such as
declaring a variable equal to an anonymous code block like `void x = {return;};` or writing
an anonymous block somewhere in the function; anonymous blocks execute in-line.

You cannot put template functions inside of template functions because they are functions.

You can put object templates inside object templates, and functions inside object templates,
or even templates inside of object templates, but no named functions inside of functions, ever.


**Generic Hardware Register example:**
```
object template <T> Register {
    volatile const T* address;
    def read() -> T { return *address; };
    def write(T val) -> void { *address = val; };
};

// Instantiate for a 32-bit MMIO register
Register<data{32}> statusReg = @0x40000000;
statusReg.write(0xFF);
```


Flux allows defining custom operators with `operator` and their use in code like any other operator.
You cannot redefine Flux built-in operators (+,-,*,/,&,==,+=,++,-=,-- etc) unless they are overloaded
meaning the parameter types of the left and right hand sides are different than the natural types.
This allows for you to write `newObj = myObj1 + myObj2;` syntax without the type checker throwing an error.
You define operators in the following manner:
```
operator(i32 x, i32 y)[e+] -> float  // Or any return type
{
	return (x * (10 ^^ y))
};

operator(i32 x, i32 y)[e-] -> float
{
    return (x * (10 ^^ (y * -1)))
};

// To use an operator in code, you write:
def main() -> i32
{
	print(1 e+ 20); // Result of (1 * 10^20) - 1
	return 0;
};

(1 e+ 20) e- (1 e+ 20);   // (1 * 10^20) * (10 ^ ((1 * 10^20) * -1)) equivalent
```


**Arrays:**
```
import "standard.fx" as std;
using std::io, std::types;

i32[] ia_myArray = [3, 92, 14, 30, 6, 5, 11, 400];

// i32 runtime_error_UB = ia_myArray[10];          // Length is only 8, accessing index 11

i32[] ia_mySorted = []
i32 tmp, lowest;

def len(i32[] array) -> i32
{
	return sizeof(array) / 32;
}

for (x in ia_myArray)
{
	if (x < _.next())   // Built-in next getter method for iterables (iterable denoted with `_`) represents ia_myArray
	{
		x in ia_mySorted ? continue : ia_mySorted.append(x);
	};

	if (len(ia_myArray) < len(ia_mySorted))    // Lengths unequal, not done sorting
	{
		_.setpos(0);    // Reset the iterator position to 0, allowing the loop to continue, setpos is a special function
	}
	else if (len(ia_myArray) == len(ia_mySorted))
	{
		break;
	};
};
```

**Array Comprehension:**
```
// Basic comprehension
i32[] squares = [x ^^ 2 for (x in 1..10)];

// With condition
i32[] evens = [x for (x in 1..20) if (x % 2 == 0)];

// Multi-dimensional
i32[][] matrix = [[i * j for (j in 1..5)] for (i in 1..5)];

// With type conversion
float[] floats = [(float)x for (x in int_array)];
```

**Dictionaries:**
```
dict myDict1 = {0: "First",
                1: "Second",
                2: "Third"}

dict myDict2 = {"test_1": "Test phrase 1.",
                "test_2": "The void stares back.",
                "test_3": "Hello World!"}

for (x,y in myDict1)
{
	switch (y)
	{
		case("Second")
		{
			print("Second!");
		};
		case(default)
		{
			print("Not the second index in this dictionary.");
		};
	};
};
```

**Destructuring:**
```
object Obj
{
	float p;
	string j;

	def __init(float p, string j)
	{
		this.p = p;
		this.j = j;
	};
};

struct Point { i32 x; i32 y; } q = {5,3};  // Can declare at the end of a definition like so

Point p = {10, 20};
Obj myObj(3.14,"pi");

auto {x, y} = u;     // i32 x=10, i32 y=20
auto {p, j} = myObj; // float p=3.14, string j="pi"
print(q.x + q.y);    // 8
```

**Casting:**
```
i32 x = 5;
string y = (string)x;   // "5"
```



Keyword list:
auto, as, asm, assert, and, break, case, catch, const, continue, data, def,
default, do, else, enum, for, if, import, in, is, array, namespace, not, object,
operator, or, return, signed, sizeof, struct, super, switch, template, this,
throw, try, typeof, unsigned, using, void, volatile, while, xor


Literal types:
array `[a,b,c,d,...]`, dictionary `{a:b,c:d,...}`, integer `5`, float `3.14`, string `"x"`


================================================================================
                        FLUX OPERATOR PRECEDENCE TABLE
                              (Highest to Lowest)
================================================================================

Level | Operators                                    | Assoc | Description
------|----------------------------------------------|-------|------------------
  1   | () [] . ::                                   | Left  | Primary expressions
  2   | ++ -- (postfix)                              | Left  | Postfix inc/dec
  3   | ++ -- (prefix) + - ! ~ @ * not sizeof typeof | Right | Unary operators
  4   | (type)                                       | Right | Type casting
  5   | ^^                                           | Right | Exponentiation
  6   | * / %                                        | Left  | Multiplicative
  7   | + -                                          | Left  | Additive
  8   | << >>                                        | Left  | Bit shift
  9   | < <= > >= in                                 | Left  | Relational
 10   | == !=                                        | Left  | Equality
 11   | is not as                                    | Left  | Identity
 12   | &                                            | Left  | Bitwise AND
 13   | ^ xor                                        | Left  | Bitwise XOR
 14   | |                                            | Left  | Bitwise OR
 15   | and &&                                       | Left  | Logical AND
 16   | or ||                                        | Left  | Logical OR
 17   | ?:                                           | Right | Conditional
 18   | = += -= *= /= %= &= |= ^= <<= >>= ^^=        | Right | Assignment
 19   | ,                                            | Left  | Comma

================================================================================