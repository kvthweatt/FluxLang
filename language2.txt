Flux is a mix of C++, Zig, and Python, and has a slightly more strict syntax than C++ or Zig.

The Flux code brace style is Allman style. There is no syntactic sugar.

Flux gets its name from flux or solder paste used to clean in preparation for soldering,
ie to perform electrical engineering.

Flux uses the object keyword as opposed to the class keyword, because it's more logical.

**Objects:**
Prototype / forward declaration: `object myObj;`
Definition: `object myObj {};`
Instance: `myObj(){} newObj;`
Member access: `newObj.x`

Example usage:
```
object myObj
{
	def __init(x, y) -> void
	{
		this.a = x;
		this.b = y;
		return;
	};
};

myObj(data1, data2){} testObject;
```

Inheritance:
```
object anotherObj<myObj>
{
	def __init() -> void
	{
		myObj.__init();
		return;
	};
};
```

Objects cannot be defined inside of a function, they must be within a namespace, another object, or global scope.
`__init` is always called on object instantiation.

**Namespaces:**
Definition: `namespace myNamespace {};`
Scope access: `myNamespace::myObject`

Namespace example:
```
namespace std
{
	object myObj
	{
		def __init() -> void
		{
			return;
		};
	};
};

namespace std
{
	object myObj
	{
		def __init() -> void
		{
			return;
		};
	};
};
```

Namespaces **MUST** be in global scope.
Duplicate namespace definitions do not redefine the namespace, the members
of both combine as if they were one namespace. This is so the standard
library or any library can have a core namespace across multiple files.
Namespaces are the only container that have this functionality.
Namespaces can only directly contain objects at their root scope.

The reason objects and structs cannot be defined inside of functions
is to make functions cleanly written. You can define them globally,
or organize them into a namespace, but not in functions.

Structs can contain instances of objects.
Structs cannot contain functions, templates, or anonymous blocks, but they may contain pointers to functions and templates.

```
object myObject
{
	def __init() -> void         // Constructor, called on instantiation
	{
		return;
	};

	def __exit() -> void         // Destructor, called on destruction
	{
		return;
	};
};

struct myStruct
{
	myObject{} newObj1, newObj2;
};

struct newStruct
{
	myStruct;              // structs can contain structs
}
```

A Flux program must have a main() function, and must be defined in global scope.

**Function definition:**
```
def name (parameters) -> return_type
{
	return return_value;                      // A `return` statement must be found somewhere within a function body.
};

// Example function
def myAdd(int x, int y) -> int
{
	return x + y;
};

// Overloading
def myAdd(float x, float y) -> float
{
	return x + y;
}

// Templates can accomplish the same thing without multiple functions.
```

If a function's return type is void nothing will be returned, regardless if your return statement provides something.
Functions cannot contain object or struct definitions. This is to maintain code legibility and organization.

You can also use in-line assembly directly:

```
asm {
mov eax, 1
mov ebx, 0
int 0x80
};
```

Python uses f-strings, C++ uses a complicated format, Zig syntax is overly verbose.
Flux uses "injectable" strings, and tries to fix Zig's syntax a bit.
The syntax in Flux would be: `i"{}{}{}":{x;y;z;};`
The brackets are replaced with the results of the statements in order respective
to the statements' position in the statement list.

**i-string Example:**
```
def bar() -> !void { return "World"; };
print(i"Hello {} {}":
              {
              	bar() + "!";
                "test";
              };                            // Whitespace is ignored, this is just for positioning
     );
```

This allows you to write clean injectable strings without strange formatting.
Every code block must be ended with a semicolon. The only exception is within the i-string "quoted {} injected {} text"


Example 2:
```
def concat(string a, string b) -> string
{
    return a+b;           // string array addition is native so we really don't need this function
};

def main() -> int
{
    string h = "Hello ";
    string w = "World";   // strings are arrays of data{8} (bytes), so we can do `w[3] == 'l'`
    string x = "of ";
    string y = "Coding";
    print(i"{} {}":{concat(h,w);concat(x,y);});
    return 0;
};
```
Result: Hello World of Coding

Pointers:
```
string a = "Test";
string* pa = @a;
*pa += "ing!";
print(a);
```
Result: "Testing!"

**Pointers to variables:**
```
int data = 0;
int *p_data = @data;

p_data += 3;
print(data);  // 3
```

**Pointers to functions:**
```
def add(int x, int y) -> int
{
	return x + y;
};

def sub(int x, int y) -> int
{
	return x - y;
};

int *p_add(int,int) = @add;  // Similar to C++ syntax but no syntactic sugar
int *p_sub(int,int) = @sub;

print(p_add(0,3)); // 3
print(p_sub(5,2)); // -3

list func_list = [p_add,p_sub];
```


**Pointers to objects, structs, arrays, and dictionaries:**
```
object myObj {};                    // Definition
object* p_myObj = @myObj;           // Pointer

struct myStruct {};                 // Definition
struct* p_myStruct = @myStruct;     // Pointer

int[] i_array;                      // Definition
int[]* pi_array = @i_array;         // Pointer

// Arrays that have multiple datatypes contained are void[] arrays
void[] v_array;                     // Definition
void[]* pv_array = @v_array;        // Pointer

dict myDict;                        // Definition
dict* p_myDict = @myDict;           // Pointer
```


**Recursive function:**
```
def rsub(int x, int y) -> int
{
	if (x == 0 || y == 0) { return 0; };

	rsub(--x,--y);
	return 0;
};
```


Import
```
import "std.fx" as std;
using std::io, std::types;          // Only use `io` from std.fx (std.fx imports `input.fx` and `output.fx`
//import "math.fx";                 // Direct import of all the contents of math.fx as if the source replaced this line
```


!void is merely a way of telling the compiler you don't know what type you'll return. You may have a function that is complex and returns various - or compound - types. Flux does not support the Python-like syntax of specifying multiple return types, so we use !void instead. However, specifying the type does allow for optimization, but you cannot return `auto`.


Example of the `data` type and casting:
```
import "std.fx" as std;  // `std` becomes an immutable identifier
using std::types;         // Standard types like int, uint, float, ufloat, byte, string, string, and so on.

byte someByte = {0, 1, 0, 0, 0, 0, 0, 1};     // "A" but in binary
string somestring = i"{s}":{someByte;};       // "A"
// Back to data
somestring = (data)somestring;                // {0, 1, 0, 0, 0, 0, 0, 1}
string anotherstring = "B";                   // {0, 1, 0, 0, 0, 0, 1, 0}

somestring<<;                                 // {1, 0, 0, 0, 0, 1, 0, 0}  // Bit-shift left  (binary doubling)
somestring>>;                                 // {0, 1, 0, 0, 0, 0, 1, 0}  // Bit-shift right (binary halving)

string newstring = xor(somestring);           // {1, 0, 1, 1, 1, 1, 0, 1}  // Bit-flip (binary XOR)
newstring = xor(somestring,anotherstring);    // {0, 0, 0, 0, 0, 0, 0, 0}  // XOR two or more values

// This 0's out all the data and re-casts back to data from void.
// The temporary void casted type is the same width as the original type.
data v = (void)somestring;                     // {0, 0, 0, 0, 0, 0, 0, 0}

object someObject
{
	string x = "Hello World!";                 // 12 bytes long (96 bits)
	data {3} some3bitDatatype;                 // 3 bits long
};

data d_someObject = (void)someObject           // 99 bits long

someObject{} nulled = (void)o_newInst;         // You can only void instances of objects.

// The same casting behavior applies to objects and structs
```

Casting anything to `void` is the functional equivalent of nulling the memory occupied by that thing.

Data is a variable bit width, primitive binary data type. Anything can cast to it,
and it can cast to any standard Flux type like string, int, float, etcetera.
It is intended to allow Flux programmers to build complex custom types to
fit their needs that are flexible.

All standard Flux types are built from the data type.
These types are defined in the standard library:

bit is defined as `unsigned data {1} bit;`
bool is defined as `bit bool;`
true is defined as `bool true = 1;`
false is defined as `bool false = 0;`
i32 is defined as `signed data {32} int;`
ui32 is defined as `unsigned data {32} uint;`
float is defined as `signed data {64} float;`
ufloat is defined as `unsigned data {64} ufloat;`
string is defined as `unsigned data{8}[] string;`

Essentially you must include "std.fx" and use std.types to have access to true and false,
otherwise programmatically you would write 1 or 0 in place of them respectively.

**typeof and sizeof:**
```
print(typeof(bit));
print(typeof(bool));
print(typeof(i32));
print(sizeof(bool));
print(sizeof(i32));
print(sizeof(ufloat));
```
Result:
```
unsigned data{1}
bit
signed data{32}
1
32
64
```


**Structs:**
```
// structs are packed and have no padding naturally
// there is no way to change this.
// You add your own padding data structures manually.
struct {
    unsigned data {8} status;
    unsigned data {32} address;
};
```


**Volatile and MMIO Support:**
```
volatile const data{32}* MMIO_REGISTER = @0xFFFF0000;
```


**Example of bare-metal register access:**
```
// Define a struct for a hardware register map
struct GPIORegisters {
    unsigned data {32} control;
    unsigned data {32} status;
    unsigned data {64} buffer;
};

// Map to a fixed hardware address
volatile const GPIORegisters* GPIO = @0x40000000;

def main() -> !void {
    GPIO.control = 0x1;  // Write to control register (aligned access)
    asm { cli };         // Disable interrupts (assembly inline)
    return 0;
};
```


**The void keyword:**
void is equivalent to Python's None as well as C++'s void and can be used in both contexts such as:

`if (x is void) {...code...};`

`void x;`


**Function Templates:**
```
template <T> myMax(T x, T y) -> T
{
    return (x > y) ? x : y;
};

template <V,K,R> someFunc(V x, K y) -> R
{
	return (R)x*y;
};

// Pointer to template function:
template* <T> tp_myMax(T,T) = @myMax;
```


**Object Templates:**
```
object template <T> MyObject {  // `<T>` declares template parameters
	T value;  // Template-typed member
    def __init(T x) -> void {
        this.value = x;
        assert(typeof(x)==i32);
    };
};

// Instantiation:
MyObject<int>{} obj1;           // Explicit type binding
MyObject<float>{} obj2;         // Another type

// Inheritance:
object template <U> ChildObject <MyObject<U>> {  // Inherit from templated object
    def __init(U x, U y) -> void {
        super.MyObject<U>.__init(x);  // Explicit parent init
        this.y = y;
    };
    U y;
};

// Usage
ChildObject<int>{} child(3, 4);  // `U` = `int`, parent `T` = `int`
```

Functions cannot be defined inside of functions unless they are written lambda style such as
declaring a variable equal to an anonymous code block like `void x = {return;};`

You cannot put template functions inside of template functions because they are functions.

You can put object templates inside object templates, and functions inside object templates,
or even templates inside of object templates, but never functions inside of functions, ever.


**Generic Hardware Register example:**
```
object template <T> Register {
    volatile const T* address;
    def read() -> T { return *address; };
    def write(T val) -> void { *address = val; };
};

// Instantiate for a 32-bit MMIO register
Register<data {32}> statusReg = @0x40000000;
statusReg.write(0xFF);
```


Flux allows defining custom operators with `operator` and their use in code like any other operator.
You cannot redefine Flux built-in operators (+,-,*,/,&,==,+=,++,-=,-- etc)
You define operators in the following manner:
```
operator(int x, int y)[e+] -> float  // Or any return type
{
	return (x * (10 ** y))
};

operator(int x, int y)[e-] -> float
{
    return (x * (10 ** (y * -1)))
};

// To use an operator in code, you write:
def main() -> !void
{
	print(1 e+ 20); // Result of (1 * 10^20) - 1
	return 0;
};

(1 e+ 20) e- (1 e+ 20);   // (1 * 10^20) * (10 ^ ((1 * 10^20) * -1)) equivalent
```


**Arrays:**
```
import "std.fx" as std;
using std::io, std::types;

int[] ia_myArray = [3, 92, 14, 30, 6, 5, 11, 400];

// int cause_an_error = ia_myArray[10];          // Length is only 8, accessing index 11

int[] ia_mySorted = []
int tmp, lowest;

for (x in ia_myArray)
{
	if (x < _.next())   // Built-in next getter method for iterables (iterable denoted with `_`)
	{
		x in ia_mySorted ? continue : ia_mySorted.append(x);
	};

	if (ia_myArray.len() < ia_mySorted.len())    // Lengths unequal, not done sorting
	{
		_.setpos(0);    // Reset the iterator position to 0, allowing the loop to continue
	}
	else if (ia_myArray.len() == ia_mySorted.len())
	{
		break;
	};
};
```

**Array Comprehension:**
```
// Basic comprehension
int[] squares = [x ** 2 for (x in 1..10)];

// With condition
int[] evens = [x for (x in 1..20) if (x % 2 == 0)];

// Multi-dimensional
int[][] matrix = [[i * j for (j in 1..5)] for (i in 1..5)];

// With type conversion
float[] floats = [(float)x for (x in int_array)];
```

**Dictionaries:**
```
signed data {32} int;

dict myDict1 = {0: "First",
               1: "Second,
               2: "Third"}

dict myDict2 = {"test_1": "Test phrase 1.",
                "test_2": "The void stares back.",
                "test_3": "Hello World!"}

for (x,y in myDict1)
{
	switch (y)
	{
		case("Second")
		{
			print("Second!");
		};
		case(default)
		{
			print("Not the second index in this dictionary.");
		};
	};
};
```

**Destructuring:**
```
object Obj
{
	def __init(float p, string j) {float self.p = p; string self.j = j;};
};

struct Point { int x; int y; };

Point{} p = {10, 20};
Obj{} Obj(3.14,"pi");

auto {x, y} = p;   // int x=10, int y=20
auto {p, j} = Obj; // float p=3.14, string j="pi"
```

**Casting:**
```
int x = 5;
string y = (string)x;   // "5"
```



Keyword list:
auto, as, asm, assert, and, break, case, catch, const, continue, data, def,
default, do, else, enum, for, if, import, in, is, namespace, not, object,
operator, or, return, signed, sizeof, struct, super, switch, template, this,
throw, try, typeof, unsigned, using, void, volatile, while, xor


Literal types:
array `[a,b,c,d,...]`, dictionary `{a:b,c:d,...}`, integer `5`, float `3.14`, string `""`


Types:
data, list, dict, void, const, volatile, object, struct, def


Member access .
Scope resolution ::
Function call (), array subscript []
Prefix/Postfix increment/decrement ++, --
Unary plus/minus +, -
Logical NOT and bitwise NOT !, ~
Address-of and dereference @, *
Type casting type:identifier
Exponentiation **
Multiplication, division, modulo *, /, %
Addition, subtraction +, -
Bit shift <<, >>
Relational <, <=, >, >=
Equality, inequality ==, !=
Identity is, not, as
Bitwise AND &
Bitwise XOR ^
Bitwise OR |
Logical AND and, &&
Logical OR or, ||
Conditional expression ? :
Assignment =, +=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>=, **=
Comma operator ,