;; Flux Language BNF Grammar (Corrected)
;; Based on the Flux specification document

<program> ::= <top_level_item>*

<top_level_item> ::= <function_definition>
                   | <function_prototype>
                   | <object_definition>
                   | <object_prototype>
                   | <struct_definition>
                   | <struct_prototype>
                   | <namespace_definition>
                   | <import_statement>
                   | <using_statement>
                   | <extern_block>
                   | <global_variable_declaration>
                   | <macro_definition>
                   | <compt_block>

;; Import and Using
<import_statement> ::= "import" <string_literal> ";"
<using_statement> ::= "using" <using_list> ";"
<using_list> ::= <namespace_path> ("," <namespace_path>)*
<namespace_path> ::= <identifier> ("::" <identifier>)*

;; Function Definitions and Prototypes
<function_definition> ::= ("volatile")? "def" <identifier> <template_params>? 
                         "(" <parameter_list>? ")" "->" <return_type_specifier>
                         "{" <statement>* "}" ";"

<function_prototype> ::= ("volatile")? "def" <identifier> <template_params>? 
                        "(" <parameter_list>? ")" "->" <return_type_specifier> ";"

<template_params> ::= "<" <template_param_list> ">"
<template_param_list> ::= <identifier> ("," <identifier>)*
<parameter_list> ::= <parameter> ("," <parameter>)*
<parameter> ::= <type_specifier> <identifier>

;; Object Definitions and Prototypes
<object_definition> ::= "object" <identifier> <template_params>? <inheritance_list>? 
                       "{" <object_member>* "}" ";"

<object_prototype> ::= "object" <identifier> <template_params>? ";"

<inheritance_list> ::= ":" <type_specifier> ("," <type_specifier>)*
<object_member> ::= <access_specifier>? <member_item>
<member_item> ::= <function_definition>
                | <function_prototype>
                | <variable_declaration>
                | <object_definition>
                | <object_prototype>
                | <struct_definition>
                | <struct_prototype>

<access_specifier> ::= "public" "{" <member_item>* "}" ";"
                     | "private" "{" <member_item>* "}" ";"

;; Struct Definitions and Prototypes
<struct_definition> ::= "struct" <identifier> <template_params>? <inheritance_list>? 
                       "{" <struct_member>* "}" ";"

<struct_prototype> ::= "struct" <identifier> <template_params>? ";"

<struct_member> ::= <access_specifier>? <struct_member_item>
<struct_member_item> ::= <variable_declaration>
                       | <struct_definition>
                       | <struct_prototype>

;; Namespace Definitions
<namespace_definition> ::= "namespace" <identifier> "{" <namespace_member>* "}" ";"
<namespace_member> ::= <function_definition>
                     | <function_prototype>
                     | <object_definition>
                     | <object_prototype>
                     | <struct_definition>
                     | <struct_prototype>
                     | <namespace_definition>
                     | <variable_declaration>
                     | <macro_definition>

;; Extern Block
<extern_block> ::= "extern" "(" <string_literal> ")" "{" <function_prototype>* "}" ";"

;; Variable Declarations
<variable_declaration> ::= <variable_type_specifier> <declarator_list> ";"
<global_variable_declaration> ::= <variable_declaration>
<declarator_list> ::= <declarator> ("," <declarator>)*
<declarator> ::= <identifier> ("=" <expression>)?
               | <identifier> "[" <expression>? "]" ("=" <array_initializer>)?
               | <identifier> "*" ("=" <expression>)?

<array_initializer> ::= "{" <expression_list>? "}"
                      | "[" <expression_list>? "]"

;; Type Specifiers
<type_specifier> ::= <primitive_type>
                   | <data_type>
                   | <user_defined_type>
                   | <pointer_type>
                   | <array_type>
                   | <function_pointer_type>
                   | "void"
                   | "const" <type_specifier>
                   | "volatile" <type_specifier>

<return_type_specifier> ::= <type_specifier>

<variable_type_specifier> ::= <type_specifier>
                            | "auto"

<primitive_type> ::= "int" | "float" | "char" | "bool" | "void" | "data"

<data_type> ::= ("signed" | "unsigned")? "data" "{" <bit_width> <data_options>? "}"
<data_options> ::= ":" <alignment> (":" <endianness>)?
                 | ":" ":" <endianness>
                 | ":" <alignment> ":" <endianness>
<bit_width> ::= <integer_literal>
<alignment> ::= <integer_literal>
<endianness> ::= "0" | "1"

<user_defined_type> ::= <identifier> <template_args>?
<template_args> ::= "<" <type_list> ">"
<type_list> ::= <type_specifier> ("," <type_specifier>)*

<pointer_type> ::= <type_specifier> "*"
<array_type> ::= <type_specifier> "[" <expression>? "]"
<function_pointer_type> ::= "def" "(" "*" <identifier> ")" "(" <parameter_list>? ")" "->" <return_type_specifier> "=" "@" <identifier> ";"

;; Data Type Creation
<data_type_creation> ::= <data_type> "as" <identifier> ";"

;; Macro Definitions
<macro_definition> ::= "def" <identifier> <expression>? ";"

;; Compile-time Blocks
<compt_block> ::= "compt" "{" <top_level_item>* "}"

;; Statements
<statement> ::= <expression_statement>
              | <compound_statement>
              | <if_statement>
              | <while_statement>
              | <do_while_statement>
              | <for_statement>
              | <switch_statement>
              | <try_statement>
              | <return_statement>
              | <break_statement>
              | <continue_statement>
              | <assert_statement>
              | <throw_statement>
              | <variable_declaration>
              | <asm_statement>
              | <compt_block>
              | <destructuring_assignment>

<expression_statement> ::= <expression>? ";"
<compound_statement> ::= "{" <statement>* "}"

<if_statement> ::= "if" "(" <expression> ")" <statement> 
                  ("else" "if" "(" <expression> ")" <statement>)*
                  ("else" <statement>)? ";"

<while_statement> ::= "while" "(" <expression> ")" <statement> ";"
<do_while_statement> ::= "do" <statement> "while" "(" <expression> ")" ";"

<for_statement> ::= "for" "(" <for_init> "in" <expression> ("," <expression>)? ")" <statement> ";"
                  | "for" "(" <for_init>? ";" <expression>? ";" <expression>? ")" <statement> ";"
<for_init> ::= <variable_declaration>
             | <identifier> ("," <identifier>)*

<switch_statement> ::= "switch" "(" <expression> ")" "{" <switch_case>* <default_case> "}" ";"
<switch_case> ::= "case" "(" <expression> ")" "{" <compound_statement> "}"
<default_case> ::= "default" <compound_statement> ";"

<try_statement> ::= "try" "{" <compound_statement> "}" <catch_clause>+ ";"
<catch_clause> ::= "catch" "(" <type_specifier> <identifier> ")" "{" <compound_statement> "}"

<return_statement> ::= "return" <expression>? ";"
<break_statement> ::= "break" ";"
<continue_statement> ::= "continue" ";"
<assert_statement> ::= "assert" "(" <expression> "," <expression> ")" ";"
<throw_statement> ::= "throw" "(" <expression> ")" ";"

<asm_statement> ::= "asm" "{" <asm_code> "}" ";"
<asm_code> ::= <identifier> <asm_operand>*
<asm_operand> ::= <identifier> | <integer_literal> | <register_name>
<register_name> ::= "eax" | "ebx" | "ecx" | "edx" | "esi" | "edi" | "esp" | "ebp"

;; Expressions
<expression> ::= <assignment_expression>

<assignment_expression> ::= <conditional_expression>
                          | <unary_expression> <assignment_operator> <assignment_expression>

<assignment_operator> ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "^=" 
                        | "&=" | "|=" | "^^=" | "<<=" | ">>="
                        | "`&=" | "`|=" | "`^^=" | "!&=" | "!|="
                        | "^&=" | "^!|=" | "^!&="

<conditional_expression> ::= <logical_or_expression>
                           | <logical_or_expression> "?" <expression> ":" <conditional_expression>

<logical_or_expression> ::= <logical_and_expression>
                          | <logical_or_expression> ("||" | "or" | "!|") <logical_and_expression>

<logical_and_expression> ::= <bitwise_or_expression>
                           | <logical_and_expression> ("&&" | "and" | "!&") <bitwise_or_expression>

<bitwise_or_expression> ::= <bitwise_xor_expression>
                          | <bitwise_or_expression> ("|" | "`|" | "`!|") <bitwise_xor_expression>

<bitwise_xor_expression> ::= <bitwise_and_expression>
                           | <bitwise_xor_expression> ("^^" | "xor" | "`^^" | "`^!|") <bitwise_and_expression>

<bitwise_and_expression> ::= <identity_expression>
                           | <bitwise_and_expression> ("&" | "`&" | "`!&" | "`^&" | "`^!&") <identity_expression>

<identity_expression> ::= <equality_expression>
                        | <identity_expression> ("is" | "not") <equality_expression>

<equality_expression> ::= <relational_expression>
                        | <equality_expression> ("==" | "!=") <relational_expression>

<relational_expression> ::= <range_expression>
                          | <relational_expression> ("<" | ">" | "<=" | ">=" | "in") <range_expression>

<range_expression> ::= <shift_expression>
                     | <range_expression> ".." <shift_expression>

<shift_expression> ::= <additive_expression>
                     | <shift_expression> ("<<" | ">>") <additive_expression>

<additive_expression> ::= <multiplicative_expression>
                        | <additive_expression> ("+" | "-") <multiplicative_expression>

<multiplicative_expression> ::= <exponential_expression>
                              | <multiplicative_expression> ("*" | "/" | "%") <exponential_expression>

<exponential_expression> ::= <cast_expression>
                           | <exponential_expression> "^" <cast_expression>

<cast_expression> ::= <unary_expression>
                    | "(" <type_specifier> ")" <cast_expression>
                    | <unary_expression> "as" <type_specifier>

<unary_expression> ::= <postfix_expression>
                     | "++" <unary_expression>
                     | "--" <unary_expression>
                     | <unary_operator> <cast_expression>
                     | "sizeof" <unary_expression>
                     | "sizeof" "(" <type_specifier> ")"
                     | "alignof" <unary_expression>
                     | "alignof" "(" <type_specifier> ")"
                     | "typeof" <unary_expression>
                     | "typeof" "(" <type_specifier> ")"

<unary_operator> ::= "+" | "-" | "!" | "~" | "*" | "@" | "not"

<postfix_expression> ::= <primary_expression>
                       | <postfix_expression> "[" <expression> "]"
                       | <postfix_expression> "(" <expression_list>? ")"
                       | <postfix_expression> "." <identifier>
                       | <postfix_expression> "::" <identifier>
                       | <postfix_expression> "++"
                       | <postfix_expression> "--"
                       | <postfix_expression> ".__" <identifier> "(" <expression_list>? ")"

<primary_expression> ::= <identifier>
                       | <constant>
                       | <string_literal>
                       | <i_string>
                       | <f_string>
                       | <array_literal>
                       | <array_comprehension>
                       | "(" <expression> ")"
                       | "this"
                       | "super"
                       | <function_call_chain>

<function_call_chain> ::= <primary_expression> ("<-" <primary_expression>)*

<array_literal> ::= "[" <expression_list>? "]"
<array_comprehension> ::= "[" <expression> "for" "(" <identifier> ("," <identifier>)? "in" <expression> ")" 
                         ("if" "(" <expression> ")")? "]"

<expression_list> ::= <expression> ("," <expression>)*

;; String Interpolation
<i_string> ::= "i" <string_literal> ":" "{" <expression_list> "}"
<f_string> ::= "f" <string_literal>

;; Destructuring
<destructuring_assignment> ::= "auto" "{" <identifier_list> "}" "=" <expression> "{" <identifier_list> "}" ";"
<identifier_list> ::= <identifier> ("," <identifier>)*

;; Literals
<constant> ::= <integer_literal>
             | <float_literal>
             | <character_literal>
             | <boolean_literal>
             | "void"

<integer_literal> ::= <decimal_literal>
                    | <hex_literal>
                    | <binary_literal>
                    | <octal_literal>

<decimal_literal> ::= [0-9]+
<hex_literal> ::= "0x" [0-9a-fA-F]+
<binary_literal> ::= "0b" [01]+
<octal_literal> ::= "0o" [0-7]+
<float_literal> ::= [0-9]+ "." [0-9]+ ([eE] [+-]? [0-9]+)?
<character_literal> ::= "'" <character> "'"
<string_literal> ::= '"' <string_char>* '"'
<boolean_literal> ::= "true" | "false"
<identifier> ::= [a-zA-Z_] [a-zA-Z0-9_]*

<character> ::= <any_char_except_single_quote> | <escape_sequence>
<string_char> ::= <any_char_except_double_quote> | <escape_sequence>
<escape_sequence> ::= "\" ("n" | "t" | "r" | "\" | "'" | '"' | "0" | "x" <hex_digit> <hex_digit>)
<hex_digit> ::= [0-9a-fA-F]

<any_char_except_single_quote> ::= <any_printable_char_except_single_quote>
<any_char_except_double_quote> ::= <any_printable_char_except_double_quote>
<any_printable_char_except_single_quote> ::= [^']
<any_printable_char_except_double_quote> ::= [^"]