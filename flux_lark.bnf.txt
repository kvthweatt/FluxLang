// Flux Programming Language - Lark BNF Grammar
// Based on the Flux language specification

start: program

program: (top_level_statement)*

top_level_statement: import_statement
                  | using_statement
                  | function_definition
                  | object_definition
                  | struct_definition
                  | namespace_definition
                  | extern_block
                  | compt_block
                  | contract_definition
                  | operator_overload
                  | macro_definition
                  | global_variable_declaration
                  | type_alias

// Import and Using
import_statement: "import" STRING ";"
using_statement: "using" using_list ";"
using_list: qualified_name ("," qualified_name)*

// Function Definition
function_definition: "def" IDENTIFIER template_params? "(" parameter_list? ")" "->" type_specifier contracts? function_body ";"
parameter_list: parameter ("," parameter)*
parameter: type_specifier IDENTIFIER
function_body: "{" statement* "}" contracts?
contracts: ":" IDENTIFIER

// Access specifiers need separate struct/object versions
struct_access_specifier: "public" "{" struct_member* "}" ";"
                       | "private" "{" struct_member* "}" ";"

object_access_specifier: "public" "{" object_member* "}" ";"
                       | "private" "{" object_member* "}" ";"

// Object Definition
object_definition: "object" IDENTIFIER template_params? inheritance? "{"  object_body "}" ";"
object_body: (object_member)*
object_member: function_definition
            | variable_declaration
            | object_definition
            | struct_definition
            | object_access_specifier
            | magic_method
inheritance: ":" inheritance_list
inheritance_list: qualified_name ("," qualified_name)*
magic_method: "__init" "(" parameter_list? ")" "->" "this" function_body
           | "__exit" "(" ")" "->" "void" function_body
           | "__expr" "(" ")" "->" type_specifier function_body
           | "__has" "(" ")" "->" type_specifier function_body
           | "__cast" "(" parameter ")" function_body
           | "__eq" "(" parameter ")" "->" "this" function_body

// Struct Definition
struct_definition: "struct" IDENTIFIER template_params? inheritance? "{" struct_body "}" ";"
struct_body: (struct_member)*
struct_member: variable_declaration
            | struct_definition
            | struct_access_specifier

// Namespace Definition
namespace_definition: "namespace" IDENTIFIER "{" namespace_body "}" ";"
namespace_body: (namespace_member)*
namespace_member: function_definition
               | object_definition
               | struct_definition
               | namespace_definition
               | variable_declaration
               | type_alias

// Access Specifiers
access_specifier: "public" "{" (object_member | struct_member)* "}" ";"
               | "private" "{" (object_member | struct_member)* "}" ";"

// Templates
template_params: "<" template_param_list ">"
template_param_list: IDENTIFIER ("," IDENTIFIER)*

// Type System - Fixed to properly capture tokens
?type_specifier: primitive_type
              | data_type
              | array_type
              | pointer_type
              | function_pointer_type
              | named_type
              | "voidtype"
              | "auto"

// Higher priority for types in type contexts
named_type.10: IDENTIFIER ("::" IDENTIFIER)*
            | IDENTIFIER "<" type_list ">"
            | IDENTIFIER ("::" IDENTIFIER)+ "<" type_list ">"

type_list: type_specifier ("," type_specifier)*

// Fixed primitive types to capture tokens properly
primitive_type: "int"    -> int_type
              | "float"  -> float_type
              | "char"   -> char_type
              | "bool"   -> bool_type

data_type: ("signed" | "unsigned") "data" "{" bit_spec "}" ("as" IDENTIFIER)?
bit_spec: NUMBER (":" NUMBER)? (":" NUMBER)?

array_type: type_specifier "[]"
pointer_type: type_specifier "*"
function_pointer_type: type_specifier "*" IDENTIFIER "(" type_list? ")"

// Variables and Declarations
variable_declaration: ("const")? ("volatile")? type_specifier variable_declarator_list ";"
variable_declarator_list: variable_declarator ("," variable_declarator)*
variable_declarator: IDENTIFIER ("=" expression)?

global_variable_declaration: variable_declaration

type_alias: type_specifier "as" IDENTIFIER ";"

// Statements
statement: expression_statement
        | compound_statement
        | if_statement
        | while_statement
        | do_while_statement
        | for_statement
        | switch_statement
        | try_catch_statement
        | return_statement
        | break_statement
        | continue_statement
        | assert_statement
        | throw_statement
        | variable_declaration
        | asm_statement

expression_statement: expression ";"
compound_statement: "{" statement* "}"

if_statement: "if" "(" expression ")" statement ("else" "if" "(" expression ")" statement)* ("else" statement)? ";"

while_statement: "while" "(" expression ")" statement ";"

do_while_statement: "do" statement "while" "(" expression ")" ";"

for_statement: for_c_style | for_python_style
for_c_style: "for" "(" (variable_declaration | expression)? ";" expression? ";" expression? ")" statement ";"
for_python_style: "for" "(" for_targets "in" expression ")" statement ";"
for_targets: IDENTIFIER ("," IDENTIFIER)*

switch_statement: "switch" "(" expression ")" "{" switch_case* default_case? "}" ";"
switch_case: "case" "(" expression ")" statement
default_case: "default" statement ";"

try_catch_statement: "try" statement catch_clause+ ";"
catch_clause: "catch" "(" type_specifier IDENTIFIER ")" statement

return_statement: "return" expression? ";"
break_statement: "break" ";"
continue_statement: "continue" ";"
assert_statement: "assert" "(" expression ("," expression)? ")" ";"
throw_statement: "throw" "(" expression ")" ";"

asm_statement: "asm" "{" asm_code? "}" ";"
asm_code: /[^}]+/

// Expressions
?expression: assignment_expression

assignment_expression: conditional_expression
                     | conditional_expression assignment_operator assignment_expression

assignment_operator: "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>="

conditional_expression: logical_or_expression
                      | logical_or_expression "?" expression ":" conditional_expression

logical_or_expression: logical_and_expression
                    | logical_or_expression "||" logical_and_expression

logical_and_expression: inclusive_or_expression
                     | logical_and_expression "&&" inclusive_or_expression

inclusive_or_expression: exclusive_or_expression
                      | inclusive_or_expression "|" exclusive_or_expression

exclusive_or_expression: and_expression
                      | exclusive_or_expression "^" and_expression
                      | exclusive_or_expression "^^" and_expression

and_expression: equality_expression
             | and_expression "&" equality_expression

equality_expression: relational_expression
                  | equality_expression "==" relational_expression
                  | equality_expression "!=" relational_expression

relational_expression: shift_expression
                    | relational_expression "<" shift_expression
                    | relational_expression ">" shift_expression
                    | relational_expression "<=" shift_expression
                    | relational_expression ">=" shift_expression
                    | relational_expression "is" shift_expression
                    | relational_expression "is" "!" shift_expression

shift_expression: additive_expression
               | shift_expression "<<" additive_expression
               | shift_expression ">>" additive_expression

additive_expression: multiplicative_expression
                  | additive_expression "+" multiplicative_expression
                  | additive_expression "-" multiplicative_expression

multiplicative_expression: cast_expression
                        | multiplicative_expression "*" cast_expression
                        | multiplicative_expression "/" cast_expression
                        | multiplicative_expression "%" cast_expression

cast_expression: unary_expression
              | "(" type_specifier ")" cast_expression

unary_expression: postfix_expression
               | "++" unary_expression
               | "--" unary_expression
               | unary_operator cast_expression
               | "sizeof" "(" (expression | type_specifier) ")"
               | "alignof" "(" type_specifier ")"
               | "typeof" "(" expression ")"

unary_operator: "&" | "*" | "+" | "-" | "~" | "!" | "@"

postfix_expression: primary_expression
                 | postfix_expression "[" expression "]"
                 | postfix_expression "(" argument_list? ")"
                 | postfix_expression "." IDENTIFIER
                 | postfix_expression "::" IDENTIFIER
                 | postfix_expression "++"
                 | postfix_expression "--"
                 | postfix_expression "{" member_list "}"

argument_list: expression ("," expression)*
member_list: IDENTIFIER ("," IDENTIFIER)*

?primary_expression: literal
                  | "(" expression ")"
                  | array_literal
                  | i_string
                  | f_string
                  | array_comprehension
                  | this_expression
                  | super_expression
                  | qualified_name

this_expression: "this"
super_expression: "super"

// Literals
literal: NUMBER
      | FLOAT
      | STRING
      | CHAR
      | "true"
      | "false"
      | "void"

array_literal: "[" [expression ("," expression)*] "]"

// String Interpolation
i_string: "i" STRING ":" "{" expression_list "}"
f_string: "f" STRING
expression_list: expression (";" expression)*

// Array Comprehension
array_comprehension: "[" expression "for" "(" for_targets "in" expression ")" ("if" "(" expression ")")? "]"

// Contract Definition
contract_definition: "contract" IDENTIFIER ("(" parameter_list? ")")? "{" statement* "}" ";"

// Operator Overloading
operator_overload: "operator" "(" parameter_list ")" "[" operator_symbol "]" "->" type_specifier function_body ";"
operator_symbol: "+" | "-" | "*" | "/" | "%" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "&&" | "||" | "&" | "|" | "^" | "<<" | ">>" | "++" | "--" | "!" | "~" | "[]" | "()" | CUSTOM_OPERATOR

// Macro Definition
macro_definition: "def" IDENTIFIER macro_value ";"
macro_value: expression | "`" operator_symbol

// Extern Block
extern_block: "extern" "(" STRING ")" "{" extern_declaration* "}" ";"
extern_declaration: function_prototype ";"
function_prototype: "def" IDENTIFIER "(" parameter_list? ")" "->" type_specifier

// Compile-time Block
compt_block: "compt" "{" statement* "}"

// Lower priority for names in expression contexts
qualified_name.5: IDENTIFIER ("::" IDENTIFIER)*

// Destructuring
destructure_assignment: "auto" "{" IDENTIFIER ("," IDENTIFIER)* "}" "=" expression "{" member_list "}" ";"

// Terminals
IDENTIFIER: /[a-zA-Z_][a-zA-Z0-9_]*/
NUMBER: /\d+/
FLOAT: /\d+\.\d+/
STRING: /"([^"\\]|\\.)*"/
CHAR: /'([^'\\]|\\.)*'/
CUSTOM_OPERATOR: /`[!@#$%^&*+=<>?\/\\|-]+/

// Comments
COMMENT: "//" /[^\n]*/ NEWLINE
       | "/*" /(.|\n)*?/ "*/"

// Whitespace
%import common.WS
%ignore WS
%ignore COMMENT
%ignore NEWLINE

NEWLINE: /\r?\n/