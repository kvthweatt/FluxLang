; Top-level program structure
<program> ::= <global_declaration>*

<global_declaration> ::= <import_statement>
                      | <using_statement>
                      | <namespace_declaration>
                      | <object_declaration>
                      | <struct_declaration>
                      | <function_declaration>
                      | <template_declaration>
                      | <operator_declaration>
                      | <variable_declaration> ";"

; Import and using statements
<import_statement> ::= "import" <string_literal> "as" <identifier> ";"
                    | "import" <string_literal> ";"

<using_statement> ::= "using" <using_list> ";"
<using_list> ::= <qualified_identifier> ("," <qualified_identifier>)*

; Namespace declarations
<namespace_declaration> ::= "namespace" <identifier> "{" <namespace_body> "}" ";"
<namespace_body> ::= (<object_declaration> | <struct_declaration> | <function_declaration> | <template_declaration>)*

; Object declarations
<object_declaration> ::= <object_forward_declaration>
                      | <object_definition>

<object_forward_declaration> ::= "object" <identifier> <template_parameters>? ";"

<object_definition> ::= "object" <identifier> <template_parameters>? <inheritance_clause>? "{" <object_body> "}" ";"

<inheritance_clause> ::= "<" <type_specifier> ">"

<object_body> ::= (<member_declaration>)*

<member_declaration> ::= <function_declaration>
                      | <variable_declaration> ";"
                      | <object_declaration>
                      | <struct_declaration>
                      | <template_declaration>

; Struct declarations
<struct_declaration> ::= "struct" <identifier> <template_parameters>? "{" <struct_body> "}" ";"
<struct_body> ::= (<struct_member>)*
<struct_member> ::= <variable_declaration> ";"

; Function declarations
<function_declaration> ::= "def" <identifier> "(" <parameter_list>? ")" "->" <type_specifier> "{" <statement_list> "}" ";"

<parameter_list> ::= <parameter> ("," <parameter>)*
<parameter> ::= <type_specifier> <identifier>

; Template declarations
<template_declaration> ::= "template" "<" <template_parameter_list> ">" <template_body>

<template_parameter_list> ::= <template_parameter> ("," <template_parameter>)*
<template_parameter> ::= <identifier>

<template_body> ::= <function_declaration>
                 | <object_declaration>
                 | <struct_declaration>

<template_parameters> ::= "<" <template_argument_list> ">"
<template_argument_list> ::= <template_argument> ("," <template_argument>)*
<template_argument> ::= <type_specifier> | <identifier>

; Operator declarations
<operator_declaration> ::= "operator" "(" <parameter_list> ")" "[" <operator_symbol> "]" "->" <type_specifier> "{" <statement_list> "}" ";"

<operator_symbol> ::= <identifier> | <symbol_sequence>
<symbol_sequence> ::= (<symbol>)+

; Type specifiers
<type_specifier> ::= <basic_type>
                  | <pointer_type>
                  | <array_type>
                  | <function_pointer_type>
                  | <template_instantiation>
                  | <qualified_identifier>

<basic_type> ::= <data_type>
              | <primitive_type>
              | <identifier>

<data_type> ::= <signedness>? "data" "{" <integer_literal> "}"
<signedness> ::= "signed" | "unsigned"

<primitive_type> ::= "void" | "auto"

<pointer_type> ::= <type_specifier> "*"

<array_type> ::= <type_specifier> "[" "]"

<function_pointer_type> ::= <type_specifier> "*" "(" <type_list>? ")"
<type_list> ::= <type_specifier> ("," <type_specifier>)*

<template_instantiation> ::= <identifier> "<" <template_argument_list> ">"

; Variable declarations
<variable_declaration> ::= <type_specifier> <variable_declarator_list>
                        | <type_specifier> <identifier> "=" <expression>
                        | "auto" <destructuring_assignment>

<variable_declarator_list> ::= <variable_declarator> ("," <variable_declarator>)*
<variable_declarator> ::= <identifier> <initializer>?

<initializer> ::= "=" <expression>
                | "{" <expression_list>? "}"

<destructuring_assignment> ::= "{" <identifier_list> "}" "=" <expression>
<identifier_list> ::= <identifier> ("," <identifier>)*

; Statements
<statement_list> ::= <statement>*

<statement> ::= <expression_statement>
             | <compound_statement> ";"
             | <if_statement> ";"
             | <while_statement> ";"
             | <for_statement> ";"
             | <switch_statement> ";"
             | <return_statement>
             | <break_statement>
             | <continue_statement>
             | <variable_declaration> ";"
             | <assembly_statement>
             | <anonymous_block>

<expression_statement> ::= <expression>? ";"

<compound_statement> ::= "{" <statement_list> "}"

<if_statement> ::= "if" "(" <expression> ")" <statement> ("else" <statement>)?

<while_statement> ::= "while" "(" <expression> ")" <statement>

<for_statement> ::= "for" "(" <for_init>? ";" <expression>? ";" <expression>? ")" <statement>
                 | "for" "(" <identifier> "in" <expression> ")" <statement>
                 | "for" "(" <identifier> "," <identifier> "in" <expression> ")" <statement>

<for_init> ::= <variable_declaration> | <expression>

<switch_statement> ::= "switch" "(" <expression> ")" "{" <case_list> "}"
<case_list> ::= <case_statement>*
<case_statement> ::= "case" "(" <expression> ")" <compound_statement> ";"
                  | "case" "(" "default" ")" <compound_statement> ";"

<return_statement> ::= "return" <expression>? ";"

<break_statement> ::= "break" ";"

<continue_statement> ::= "continue" ";"

<assembly_statement> ::= "asm" "{" <assembly_code> "}"
<assembly_code> ::= <any_text>

<anonymous_block> ::= "{" <statement_list> "}"

; Expressions
<expression> ::= <assignment_expression>

<assignment_expression> ::= <conditional_expression>
                          | <unary_expression> <assignment_operator> <assignment_expression>

<assignment_operator> ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | "**="

<conditional_expression> ::= <logical_or_expression>
                          | <logical_or_expression> "?" <expression> ":" <conditional_expression>

<logical_or_expression> ::= <logical_and_expression>
                         | <logical_or_expression> ("or" | "||") <logical_and_expression>

<logical_and_expression> ::= <identity_expression>
                          | <logical_and_expression> ("and" | "&&") <identity_expression>

<identity_expression> ::= <bitwise_or_expression>
                       | <identity_expression> ("is" | "not" | "as") <bitwise_or_expression>

<bitwise_or_expression> ::= <bitwise_xor_expression>
                         | <bitwise_or_expression> "|" <bitwise_xor_expression>

<bitwise_xor_expression> ::= <bitwise_and_expression>
                          | <bitwise_xor_expression> ("^" | "xor") <bitwise_and_expression>

<bitwise_and_expression> ::= <equality_expression>
                          | <bitwise_and_expression> "&" <equality_expression>

<equality_expression> ::= <relational_expression>
                       | <equality_expression> ("==" | "!=") <relational_expression>

<relational_expression> ::= <shift_expression>
                         | <relational_expression> ("<" | "<=" | ">" | ">=") <shift_expression>

<shift_expression> ::= <additive_expression>
                    | <shift_expression> ("<<" | ">>") <additive_expression>

<additive_expression> ::= <multiplicative_expression>
                       | <additive_expression> ("+" | "-") <multiplicative_expression>

<multiplicative_expression> ::= <exponentiation_expression>
                             | <multiplicative_expression> ("*" | "/" | "%") <exponentiation_expression>

<exponentiation_expression> ::= <cast_expression>
                             | <exponentiation_expression> ("^^" | "**") <cast_expression>

<cast_expression> ::= <unary_expression>
                   | "(" <type_specifier> ")" <cast_expression>

<unary_expression> ::= <postfix_expression>
                    | <unary_operator> <unary_expression>
                    | "sizeof" "(" <type_specifier> ")"
                    | "typeof" "(" <expression> ")"

<unary_operator> ::= "++" | "--" | "+" | "-" | "!" | "~" | "*" | "@"

<postfix_expression> ::= <primary_expression>
                      | <postfix_expression> "[" <expression> "]"
                      | <postfix_expression> "(" <argument_list>? ")"
                      | <postfix_expression> "." <identifier>
                      | <postfix_expression> "::" <identifier>
                      | <postfix_expression> "++"
                      | <postfix_expression> "--"

<argument_list> ::= <expression> ("," <expression>)*

<primary_expression> ::= <identifier>
                      | <literal>
                      | <parenthesized_expression>
                      | <array_literal>
                      | <dictionary_literal>
                      | <i_string_literal>
                      | <array_comprehension>
                      | <anonymous_function>

<parenthesized_expression> ::= "(" <expression> ")"

; Literals
<literal> ::= <integer_literal>
           | <float_literal>
           | <string_literal>
           | <character_literal>
           | <data_literal>

<integer_literal> ::= <decimal_integer> | <hexadecimal_integer> | <binary_integer> | <octal_integer>
<decimal_integer> ::= <digit>+
<hexadecimal_integer> ::= "0x" <hex_digit>+
<binary_integer> ::= "0b" <binary_digit>+
<octal_integer> ::= "0o" <octal_digit>+

<float_literal> ::= <digit>+ "." <digit>+ <exponent>?
                 | <digit>+ <exponent>
<exponent> ::= ("e" | "E") ("+" | "-")? <digit>+

<string_literal> ::= "\"" <string_char>* "\""
<character_literal> ::= "'" <char> "'"

<data_literal> ::= "{" <bit_list> "}"
<bit_list> ::= <bit> ("," <bit>)*
<bit> ::= "0" | "1"

<array_literal> ::= "[" <expression_list>? "]"
<expression_list> ::= <expression> ("," <expression>)*

<dictionary_literal> ::= "{" <key_value_list>? "}"
<key_value_list> ::= <key_value_pair> ("," <key_value_pair>)*
<key_value_pair> ::= <expression> ":" <expression>

<i_string_literal> ::= "i" <string_literal> ":" "{" <i_string_expression_list> "}" ";"
<i_string_expression_list> ::= <expression> (";" <expression>)*

<array_comprehension> ::= "[" <expression> "for" "(" <identifier> "in" <expression> ")" <comprehension_condition>? "]"
<comprehension_condition> ::= "if" "(" <expression> ")"

<anonymous_function> ::= "{" <statement_list> "}"

; Identifiers and qualified names
<identifier> ::= <letter> (<letter> | <digit> | "_")*
<qualified_identifier> ::= <identifier> ("::" <identifier>)*

; Character sets
<letter> ::= "a" | "b" | ... | "z" | "A" | "B" | ... | "Z" | "_"
<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
<hex_digit> ::= <digit> | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F"
<binary_digit> ::= "0" | "1"
<octal_digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7"

<string_char> ::= <any_char_except_quote_and_backslash> | <escape_sequence>
<escape_sequence> ::= "\" ("n" | "r" | "t" | "\"" | "'" | "\\" | "0" | <hex_escape> | <unicode_escape>)
<hex_escape> ::= "x" <hex_digit> <hex_digit>
<unicode_escape> ::= "u" <hex_digit> <hex_digit> <hex_digit> <hex_digit>

<char> ::= <any_printable_char> | <escape_sequence>

<symbol> ::= "+" | "-" | "*" | "/" | "%" | "^" | "&" | "|" | "~" | "!" | "=" | "<" | ">" | "?" | ":" | "." | "," | ";" | "@" | "#" | "$"

<any_text> ::= <any_character>*