# Flux Language BNF Grammar and Decay Rules

```bnf
<program> ::= <translation-unit>

<translation-unit> ::= <external-declaration>*

<external-declaration> ::= <function-definition>
                        | <object-definition>
                        | <struct-definition>
                        | <namespace-definition>
                        | <template-declaration>
                        | <operator-definition>
                        | <import-statement>
                        | <using-statement>
                        | <variable-declaration>

<import-statement> ::= "import" <string-literal> "as" <identifier> ";"

<using-statement> ::= "using" <qualified-id-list> ";"

<qualified-id-list> ::= <qualified-id> ("," <qualified-id>)*

<qualified-id> ::= <identifier> ("::" <identifier>)*

<namespace-definition> ::= "namespace" <identifier> "{" <namespace-member>* "}" ";"

<namespace-member> ::= <object-definition>
                    | <namespace-definition>

<function-definition> ::= <template-prefix>? "def" <identifier> "(" <parameter-list>? ")" "->" <type-specifier> <compound-statement> ";"

<template-prefix> ::= "template" "<" <template-parameter-list> ">"

<template-parameter-list> ::= <template-parameter> ("," <template-parameter>)*

<template-parameter> ::= <identifier>

<parameter-list> ::= <parameter> ("," <parameter>)*

<parameter> ::= <type-specifier> <identifier>

<object-definition> ::= <template-prefix>? "object" <identifier> <inheritance-clause>? "{" <object-member>* "}" ";"

<inheritance-clause> ::= ":" <inheritance-list>

<inheritance-list> ::= <inheritance-specifier> ("," <inheritance-specifier>)*

<inheritance-specifier> ::= <qualified-id>
                         | "!" <qualified-id>

<object-member> ::= <function-definition>
                 | <variable-declaration>
                 | <object-definition>
                 | <struct-definition>
                 | <template-declaration>

<struct-definition> ::= <template-prefix>? "struct" <identifier> "{" <struct-member>* "}" ";"

<struct-member> ::= <variable-declaration>
                 | <struct-definition>

<operator-definition> ::= "operator" "(" <parameter-list> ")" "[" <operator-symbol> "]" "->" <type-specifier> <compound-statement> ";"

<operator-symbol> ::= <identifier>

<template-declaration> ::= <template-prefix> <function-definition>
                        | <template-prefix> <object-definition>
                        | <template-prefix> <struct-definition>

<variable-declaration> ::= <type-specifier> <declarator-list> ";"

<declarator-list> ::= <declarator> ("," <declarator>)*

<declarator> ::= <identifier> <initializer>?
              | <identifier> "[" <expression>? "]" <initializer>?
              | "*" <declarator>

<initializer> ::= "=" <initializer-clause>

<initializer-clause> ::= <expression>
                      | <braced-init-list>

<braced-init-list> ::= "{" <initializer-list>? "}"

<initializer-list> ::= <initializer-clause> ("," <initializer-clause>)*

<type-specifier> ::= <simple-type-specifier>
                  | <template-type-specifier>
                  | <pointer-type-specifier>
                  | <array-type-specifier>
                  | <data-type-specifier>

<simple-type-specifier> ::= <identifier>
                         | <qualified-id>
                         | "void"
                         | "auto"

<template-type-specifier> ::= <identifier> "<" <template-argument-list> ">"

<template-argument-list> ::= <template-argument> ("," <template-argument>)*

<template-argument> ::= <type-specifier>
                     | <expression>

<pointer-type-specifier> ::= <type-specifier> "*"
                          | <type-specifier> "*" "(" <parameter-list> ")"

<array-type-specifier> ::= <type-specifier> "[" "]"

<data-type-specifier> ::= <signedness>? "data" "{" <expression> "}"

<signedness> ::= "signed" | "unsigned"

<statement> ::= <expression-statement>
             | <compound-statement>
             | <selection-statement>
             | <iteration-statement>
             | <jump-statement>
             | <variable-declaration>
             | <inline-assembly>

<expression-statement> ::= <expression>? ";"

<compound-statement> ::= "{" <statement>* "}" ";"

<selection-statement> ::= <if-statement>
                       | <switch-statement>

<if-statement> ::= "if" "(" <expression> ")" <compound-statement> <else-clause>? ";"

<else-clause> ::= "else" <compound-statement>

<switch-statement> ::= "switch" "(" <expression> ")" "{" <switch-case>* "}" ";"

<switch-case> ::= <case-label> <compound-statement>
               | <default-label> <compound-statement>

<case-label> ::= "case" "(" <expression> ")"

<default-label> ::= "case" "(" "default" ")"

<iteration-statement> ::= <while-statement>
                       | <do-statement>
                       | <for-statement>

<while-statement> ::= "while" "(" <expression> ")" <compound-statement> ";"

<do-statement> ::= "do" <compound-statement> "while" "(" <expression> ")" ";"

<for-statement> ::= "for" "(" <for-init>? ";" <expression>? ";" <for-increment>? ")" <compound-statement> ";"
                 | "for" "(" <identifier> "in" <expression> ")" <compound-statement> ";"
                 | "for" "(" <destructuring-pattern> "in" <expression> ")" <compound-statement> ";"

<for-init> ::= <variable-declaration>
            | <expression>

<for-increment> ::= <expression>

<destructuring-pattern> ::= <identifier> "," <identifier>

<jump-statement> ::= "return" <expression>? ";"
                  | "break" ";"
                  | "continue" ";"

<inline-assembly> ::= "asm" "{" <assembly-code> "}" ";"

<assembly-code> ::= <string-literal>*

<expression> ::= <assignment-expression>

<assignment-expression> ::= <conditional-expression>
                         | <unary-expression> <assignment-operator> <assignment-expression>

<assignment-operator> ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | "^^="

<conditional-expression> ::= <logical-or-expression>
                          | <logical-or-expression> "?" <expression> ":" <conditional-expression>

<logical-or-expression> ::= <logical-and-expression>
                         | <logical-or-expression> ("or" | "||") <logical-and-expression>

<logical-and-expression> ::= <bitwise-or-expression>
                          | <logical-and-expression> ("and" | "&&") <bitwise-or-expression>

<bitwise-or-expression> ::= <bitwise-xor-expression>
                         | <bitwise-or-expression> "|" <bitwise-xor-expression>

<bitwise-xor-expression> ::= <bitwise-and-expression>
                          | <bitwise-xor-expression> "^" <bitwise-and-expression>

<bitwise-and-expression> ::= <equality-expression>
                          | <bitwise-and-expression> "&" <equality-expression>

<equality-expression> ::= <relational-expression>
                       | <equality-expression> ("==" | "!=") <relational-expression>

<relational-expression> ::= <identity-expression>
                         | <relational-expression> ("<" | ">" | "<=" | ">=") <identity-expression>

<identity-expression> ::= <shift-expression>
                       | <identity-expression> ("is" | "not" | "as") <shift-expression>

<shift-expression> ::= <additive-expression>
                    | <shift-expression> ("<<" | ">>") <additive-expression>

<additive-expression> ::= <multiplicative-expression>
                       | <additive-expression> ("+" | "-") <multiplicative-expression>

<multiplicative-expression> ::= <exponential-expression>
                             | <multiplicative-expression> ("*" | "/" | "%") <exponential-expression>

<exponential-expression> ::= <cast-expression>
                          | <exponential-expression> "^^" <cast-expression>

<cast-expression> ::= <unary-expression>
                   | "(" <type-specifier> ")" <cast-expression>

<unary-expression> ::= <postfix-expression>
                    | "++" <unary-expression>
                    | "--" <unary-expression>
                    | <unary-operator> <cast-expression>

<unary-operator> ::= "+" | "-" | "!" | "~" | "@" | "*"

<postfix-expression> ::= <primary-expression>
                      | <postfix-expression> "[" <expression> "]"
                      | <postfix-expression> "(" <argument-list>? ")"
                      | <postfix-expression> "." <identifier>
                      | <postfix-expression> "::" <identifier>
                      | <postfix-expression> "++"
                      | <postfix-expression> "--"

<argument-list> ::= <expression> ("," <expression>)*

<primary-expression> ::= <identifier>
                      | <literal>
                      | "(" <expression> ")"
                      | <i-string>
                      | <array-comprehension>
                      | <anonymous-block>

<literal> ::= <integer-literal>
           | <floating-literal>
           | <string-literal>
           | <array-literal>
           | <dictionary-literal>
           | <binary-literal>

<integer-literal> ::= <decimal-digit>+
                   | "0x" <hexadecimal-digit>+
                   | "0b" <binary-digit>+

<decimal-digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<hexadecimal-digit> ::= <decimal-digit> | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f"

<binary-digit> ::= "0" | "1"

<floating-literal> ::= <decimal-digit>+ "." <decimal-digit>*
                    | <decimal-digit>* "." <decimal-digit>+

<string-literal> ::= "\"" <string-character>* "\""

<string-character> ::= <any-character-except-quote-or-backslash>
                    | <escape-sequence>

<escape-sequence> ::= "\\" <any-character>

<array-literal> ::= "[" <element-list>? "]"

<element-list> ::= <expression> ("," <expression>)*

<dictionary-literal> ::= "{" <key-value-list>? "}"

<key-value-list> ::= <key-value-pair> ("," <key-value-pair>)*

<key-value-pair> ::= <expression> ":" <expression>

<binary-literal> ::= "{" <binary-digit-list> "}"

<binary-digit-list> ::= <binary-digit> ("," <binary-digit>)*

<i-string> ::= "i" <string-literal> ":" "{" <expression-list> "}" ";"

<expression-list> ::= <expression> (";" <expression>)*

<array-comprehension> ::= "[" <expression> "for" "(" <identifier> "in" <expression> ")" <comprehension-condition>? "]"

<comprehension-condition> ::= "if" "(" <expression> ")"

<anonymous-block> ::= "{" <statement>* "}"

<identifier> ::= <letter> (<letter> | <decimal-digit>)*

<letter> ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | 
             "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" |
             "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" |
             "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "_"
```

## Decay Rules

Based on C++ decay rules, adapted for Flux's type system:

### 1. Array-to-Pointer Decay
- **Rule**: Array types decay to pointer types when used in expressions (except when operand of `sizeof`, `typeof`, address-of `@`, or when initializing array references)
- **Example**: `i32[] arr` → `i32*` when passed to functions or used in pointer arithmetic

### 2. Function-to-Function Pointer Decay
- **Rule**: Function names decay to function pointers when used in expressions (except when operand of address-of `@`)
- **Example**: `def foo() -> void {}` → function name `foo` decays to `void*()`

### 3. Template Function Decay
- **Rule**: Template function names decay to template function pointers
- **Example**: `template <T> myFunc(T x) -> T` → `template*<T> (T)`

### 4. Object Instance Decay
- **Rule**: Object instances decay to pointers when passed to functions expecting pointers
- **Example**: `MyObject obj` → `MyObject*` in pointer contexts

### 5. Data Type Decay
- **Rule**: Specific `data{n}` types decay to generic `data` type in generic contexts
- **Example**: `data{32} x` → `data` when type information is lost

### 6. Const/Volatile Qualifier Decay
- **Rule**: Top-level const and volatile qualifiers are ignored in function parameter types
- **Example**: `const i32` parameter decays to `i32` for function matching

### 7. Reference Collapse (for auto deduction)
- **Rule**: When `auto` is used, reference-to-reference collapses
- **Example**: `auto& x = someRef` where `someRef` is already a reference

### 8. String Literal Decay
- **Rule**: String literals decay to `data{8}*` (pointer to bytes)
- **Example**: `"hello"` → `data{8}*`

### 9. Binary Literal Decay
- **Rule**: Binary literals `{0,1,0,1}` decay to `data{n}` where n is the bit count
- **Example**: `{0,1,0,1,0,0,0,1}` → `data{8}`

### 10. Template Parameter Decay
- **Rule**: Template type parameters undergo standard decay when instantiated
- **Example**: In `template <T> func(T x)`, if `T` is `i32[]`, it decays to `i32*`

### 11. Namespace Scope Decay
- **Rule**: Qualified names decay to unqualified names in their scope
- **Example**: Within namespace `std`, `std::io` can decay to `io`

### 12. Void Pointer Decay
- **Rule**: All pointer types can decay to `void*` for generic storage
- **Example**: `i32*` → `void*`, `MyObject*` → `void*`

### 13. Inheritance Decay (Upcasting)
- **Rule**: Derived object pointers decay to base object pointers
- **Example**: `ChildObject*` → `ParentObject*` (implicit upcast)

### 14. Array Comprehension Decay
- **Rule**: Array comprehensions decay to their element type arrays
- **Example**: `[x for x in range]` → appropriate array type based on expression type

### Application Order
1. Template instantiation decay (if applicable)
2. Array/function decay
3. Const/volatile decay
4. Type promotion/conversion decay
5. Pointer decay (if needed)

These decay rules ensure type safety while allowing flexible usage patterns similar to C++,
but adapted for Flux's unique features like the `data` type system and object model.